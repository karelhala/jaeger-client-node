{"version":3,"sources":["../../../crossdock/src/tchannel_server.js"],"names":["constants","DEFAULT_THRIFT_PATH","TChannelServer","crossdockSpecPath","_tracer","_helpers","serverChannel","tchannelThrift","context","bridge","tracedHandler","handleTChannelRequest","bind","register","listen","myIp","log","perProcessOptions","req","head","body","callback","isStartRequest","traceRequest","request","serverRole","json2str","promise","handleRequest","getSpan","then","tchannelResp","require","main","module","tchannel"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAAYA,S;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAIC,sBAAsB,6BAA1B;;IACqBC,c;AAIjB,8BAA6D;AAAA,YAAjDC,iBAAiD,uEAArBF,mBAAqB;;AAAA;;AACzD,aAAKG,OAAL,GAAe,qBAAW,MAAX,EAAmB,kCAAnB,EAA2C,4BAAiB,KAAjB,CAA3C,CAAf;AACA,aAAKC,QAAL,GAAgB,sBAAY,KAAKD,OAAjB,CAAhB;;AAEA,YAAIE,gBAAgB,wBAAS,EAAC,eAAe,MAAhB,EAAT,CAApB;AACA,YAAIC,iBAAiB,sBAAe;AAChC,uBAAWD,aADqB;AAEhC,0BAAcH;AAFkB,SAAf,CAArB;AAIA,YAAIK,UAAU,+BAAd;;AAEA,YAAIC,SAAS,8BAAmB,KAAKL,OAAxB,CAAb;AACA,YAAIM,gBAAgBD,OAAOC,aAAP,CAAqB,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAArB,CAApB;AACAL,uBAAeM,QAAf,CAAwBP,aAAxB,EAAuC,0BAAvC,EAAmEE,OAAnE,EAA4EE,aAA5E;;AAEAJ,sBAAcQ,MAAd,CAAqB,IAArB,EAA2B,eAAMC,IAAN,EAA3B,EAAyC,YAAM;AAC3C,8BAAQC,GAAR,CAAY,2CAAZ;AACH,SAFD;AAGH;;;;8CAEqBC,iB,EAAwBC,G,EAAUC,I,EAAWC,I,EAAWC,Q,EAAoB;AAC9F,gBAAIC,iBAA0B,KAA9B;AACA,gBAAIC,eAAeH,KAAKI,OAAxB;AACA,gBAAIhB,UAAUU,IAAIV,OAAlB;AACA,8BAAQQ,GAAR,CAAY,UAAZ,EAAwBO,aAAaE,UAArC,EAAiD,4BAAjD,EAA+E,kBAAQC,QAAR,CAAiBH,YAAjB,CAA/E;;AAEA,gBAAII,UAAU,KAAKtB,QAAL,CAAcuB,aAAd,CACVN,cADU,EAEVC,YAFU,EAGVf,QAAQqB,OAAR,EAHU,CAAd;;AAMAF,oBAAQG,IAAR,CAAa,UAACC,YAAD,EAAkB;AAC3BV,yBAAS,IAAT,EAAe;AACX,0BAAM,IADK;AAEX,4BAAQU;AAFG,iBAAf;AAKH,aAND;AAOH;;;;;;kBA3CgB7B,c;;;AA8CrB,IAAK8B,OAAD,CAAcC,IAAd,KAAuBC,MAA3B,EAAmC;AAC/B,QAAIC,WAAW,IAAIjC,cAAJ,EAAf;AACH","file":"tchannel_server.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as constants from './constants.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport DefaultContext from '../../src/default_context.js';\nimport Helpers from './helpers';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport Tracer from '../../src/tracer.js';\nimport opentracing from 'opentracing';\nimport path from 'path';\nimport TChannelBridge from '../../src/tchannel_bridge';\n\nimport TChannel from 'tchannel';\nimport TChannelThrift from 'tchannel/as/thrift';\nimport Utils from '../../src/util.js';\n\nlet DEFAULT_THRIFT_PATH = '/crossdock/tracetest.thrift';\nexport default class TChannelServer {\n    _tracer: Tracer;\n    _helpers: any;\n\n    constructor(crossdockSpecPath: string = DEFAULT_THRIFT_PATH) {\n        this._tracer = new Tracer('node', new InMemoryReporter(), new ConstSampler(false));\n        this._helpers = new Helpers(this._tracer);\n\n        let serverChannel = TChannel({'serviceName': 'node'});\n        let tchannelThrift = TChannelThrift({\n            'channel': serverChannel,\n            'entryPoint': crossdockSpecPath\n        });\n        let context = new DefaultContext();\n\n        let bridge = new TChannelBridge(this._tracer);\n        let tracedHandler = bridge.tracedHandler(this.handleTChannelRequest.bind(this));\n        tchannelThrift.register(serverChannel, 'TracedService::joinTrace', context, tracedHandler);\n\n        serverChannel.listen(8082, Utils.myIp(), () => {\n            Helpers.log('TChannel server listening on port 8082...');\n        });\n    }\n\n    handleTChannelRequest(perProcessOptions: any, req: any, head: any, body: any, callback: Function) {\n        let isStartRequest: boolean = false;\n        let traceRequest = body.request;\n        let context = req.context;\n        Helpers.log('TChannel', traceRequest.serverRole, 'received joinTrace request', Helpers.json2str(traceRequest));\n\n        let promise = this._helpers.handleRequest(\n            isStartRequest,\n            traceRequest,\n            context.getSpan()\n        );\n\n        promise.then((tchannelResp) => {\n            callback(null, {\n                'ok': true,\n                'body': tchannelResp\n                }\n            );\n        });\n    }\n}\n\nif ((require:any).main === module) {\n    let tchannel = new TChannelServer();\n}\n"]}