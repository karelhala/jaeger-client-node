{"version":3,"sources":["../../../src/metrics/metrics.js"],"names":["Object","defineProperty","exports","value","_classCallCheck","instance","Constructor","TypeError","Metrics","factory","_factory","tracesStartedSampled","createCounter","state","sampled","tracesStartedNotSampled","tracesJoinedSampled","tracesJoinedNotSampled","spansStarted","group","spansFinished","spansSampled","spansNotSampled","decodingErrors","reporterSuccess","reporterFailure","reporterDropped","reporterQueueLength","createGauge","samplerRetrieved","samplerUpdated","samplerQueryFailure","phase","samplerParsingFailure","default"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;;AAIA,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,QAAI,EAAED,oBAAoBC,WAAtB,CAAJ,EAAwC;AAAE,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,SAASA,OAAT,CAAiBC,OAAjB,EAA0B;AACpCL,oBAAgB,IAAhB,EAAsBI,OAAtB;;AAEA,SAAKE,QAAL,GAAgBD,OAAhB;;AAEA,SAAKE,oBAAL,GAA4B,KAAKD,QAAL,CAAcE,aAAd,CAA4B,QAA5B,EAAsC;AAC9DC,eAAO,SADuD;AAE9DC,iBAAS;AAFqD,KAAtC,CAA5B;;AAKA,SAAKC,uBAAL,GAA+B,KAAKL,QAAL,CAAcE,aAAd,CAA4B,QAA5B,EAAsC;AACjEC,eAAO,SAD0D;AAEjEC,iBAAS;AAFwD,KAAtC,CAA/B;;AAKA,SAAKE,mBAAL,GAA2B,KAAKN,QAAL,CAAcE,aAAd,CAA4B,QAA5B,EAAsC;AAC7DC,eAAO,QADsD;AAE7DC,iBAAS;AAFoD,KAAtC,CAA3B;;AAKA,SAAKG,sBAAL,GAA8B,KAAKP,QAAL,CAAcE,aAAd,CAA4B,QAA5B,EAAsC;AAChEC,eAAO,QADyD;AAEhEC,iBAAS;AAFuD,KAAtC,CAA9B;;AAKA,SAAKI,YAAL,GAAoB,KAAKR,QAAL,CAAcE,aAAd,CAA4B,OAA5B,EAAqC;AACrDO,eAAO,WAD8C;AAErDN,eAAO;AAF8C,KAArC,CAApB;;AAKA,SAAKO,aAAL,GAAqB,KAAKV,QAAL,CAAcE,aAAd,CAA4B,OAA5B,EAAqC;AACtDO,eAAO,WAD+C;AAEtDN,eAAO;AAF+C,KAArC,CAArB;;AAKA,SAAKQ,YAAL,GAAoB,KAAKX,QAAL,CAAcE,aAAd,CAA4B,OAA5B,EAAqC;AACrDO,eAAO,UAD8C;AAErDL,iBAAS;AAF4C,KAArC,CAApB;;AAKA,SAAKQ,eAAL,GAAuB,KAAKZ,QAAL,CAAcE,aAAd,CAA4B,OAA5B,EAAqC;AACxDO,eAAO,UADiD;AAExDL,iBAAS;AAF+C,KAArC,CAAvB;;AAKA,SAAKS,cAAL,GAAsB,KAAKb,QAAL,CAAcE,aAAd,CAA4B,iBAA5B,CAAtB;;AAEA,SAAKY,eAAL,GAAuB,KAAKd,QAAL,CAAcE,aAAd,CAA4B,gBAA5B,EAA8C;AACjEC,eAAO;AAD0D,KAA9C,CAAvB;;AAIA,SAAKY,eAAL,GAAuB,KAAKf,QAAL,CAAcE,aAAd,CAA4B,gBAA5B,EAA8C;AACjEC,eAAO;AAD0D,KAA9C,CAAvB;;AAIA,SAAKa,eAAL,GAAuB,KAAKhB,QAAL,CAAcE,aAAd,CAA4B,gBAA5B,EAA8C;AACjEC,eAAO;AAD0D,KAA9C,CAAvB;;AAIA,SAAKc,mBAAL,GAA2B,KAAKjB,QAAL,CAAckB,WAAd,CAA0B,gBAA1B,CAA3B;;AAEA,SAAKC,gBAAL,GAAwB,KAAKnB,QAAL,CAAcE,aAAd,CAA4B,SAA5B,EAAuC;AAC3DC,eAAO;AADoD,KAAvC,CAAxB;;AAIA,SAAKiB,cAAL,GAAsB,KAAKpB,QAAL,CAAcE,aAAd,CAA4B,SAA5B,EAAuC;AACzDC,eAAO;AADkD,KAAvC,CAAtB;;AAIA,SAAKkB,mBAAL,GAA2B,KAAKrB,QAAL,CAAcE,aAAd,CAA4B,SAA5B,EAAuC;AAC9DC,eAAO,SADuD;AAE9DmB,eAAO;AAFuD,KAAvC,CAA3B;;AAKA,SAAKC,qBAAL,GAA6B,KAAKvB,QAAL,CAAcE,aAAd,CAA4B,SAA5B,EAAuC;AAChEC,eAAO,SADyD;AAEhEmB,eAAO;AAFyD,KAAvC,CAA7B;AAIH,CA9ED;;AAgFA9B,QAAQgC,OAAR,GAAkB1B,OAAlB;AACA","file":"metrics.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar Metrics = function Metrics(factory) {\n    _classCallCheck(this, Metrics);\n\n    this._factory = factory;\n\n    this.tracesStartedSampled = this._factory.createCounter('traces', {\n        state: 'started',\n        sampled: 'y'\n    });\n\n    this.tracesStartedNotSampled = this._factory.createCounter('traces', {\n        state: 'started',\n        sampled: 'n'\n    });\n\n    this.tracesJoinedSampled = this._factory.createCounter('traces', {\n        state: 'joined',\n        sampled: 'y'\n    });\n\n    this.tracesJoinedNotSampled = this._factory.createCounter('traces', {\n        state: 'joined',\n        sampled: 'n'\n    });\n\n    this.spansStarted = this._factory.createCounter('spans', {\n        group: 'lifecycle',\n        state: 'started'\n    });\n\n    this.spansFinished = this._factory.createCounter('spans', {\n        group: 'lifecycle',\n        state: 'finished'\n    });\n\n    this.spansSampled = this._factory.createCounter('spans', {\n        group: 'sampling',\n        sampled: 'y'\n    });\n\n    this.spansNotSampled = this._factory.createCounter('spans', {\n        group: 'sampling',\n        sampled: 'n'\n    });\n\n    this.decodingErrors = this._factory.createCounter('decoding-errors');\n\n    this.reporterSuccess = this._factory.createCounter('reporter-spans', {\n        state: 'success'\n    });\n\n    this.reporterFailure = this._factory.createCounter('reporter-spans', {\n        state: 'failure'\n    });\n\n    this.reporterDropped = this._factory.createCounter('reporter-spans', {\n        state: 'dropped'\n    });\n\n    this.reporterQueueLength = this._factory.createGauge('reporter-queue');\n\n    this.samplerRetrieved = this._factory.createCounter('sampler', {\n        state: 'retrieved'\n    });\n\n    this.samplerUpdated = this._factory.createCounter('sampler', {\n        state: 'updated'\n    });\n\n    this.samplerQueryFailure = this._factory.createCounter('sampler', {\n        state: 'failure',\n        phase: 'query'\n    });\n\n    this.samplerParsingFailure = this._factory.createCounter('sampler', {\n        state: 'failure',\n        phase: 'parsing'\n    });\n};\n\nexports.default = Metrics;\n//# sourceMappingURL=metrics.js.map"]}