{"version":3,"sources":["../../../src/samplers/remote_sampler.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_http","require","_http2","_interopRequireDefault","_probabilistic_sampler","_probabilistic_sampler2","_ratelimiting_sampler","_ratelimiting_sampler2","_per_operation_sampler","_per_operation_sampler2","_metrics","_metrics2","_logger","_logger2","_metric_factory","_metric_factory2","obj","__esModule","default","_classCallCheck","instance","TypeError","DEFAULT_INITIAL_SAMPLING_RATE","DEFAULT_REFRESH_INTERVAL","DEFAULT_MAX_OPERATIONS","DEFAULT_SAMPLING_HOST","DEFAULT_SAMPLING_PORT","PROBABILISTIC_STRATEGY_TYPE","RATELIMITING_STRATEGY_TYPE","RemoteControlledSampler","serviceName","options","arguments","undefined","_serviceName","_sampler","sampler","logger","metrics","_refreshInterval","refreshInterval","_host","host","_port","port","_maxOperations","maxOperations","_onSamplerUpdate","onSamplerUpdate","randomDelay","Math","random","_initialDelayTimeoutHandle","setTimeout","_afterInitialDelay","bind","name","toString","_refreshIntervalHandle","setInterval","_refreshSamplingStrategy","_this","encodeURIComponent","get","res","setEncoding","body","on","chunk","_parseSamplingServerResponse","err","error","samplerQueryFailure","increment","samplerRetrieved","strategy","JSON","parse","samplerParsingFailure","_updateSampler","samplerUpdated","response","operationSampling","update","newSampler","strategyType","probabilisticSampling","samplingRate","rateLimitingSampling","maxTracesPerSecond","stringify","equal","isSampled","operation","tags","close","callback","clearTimeout","clearInterval"],"mappings":"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","file":"remote_sampler.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar _http = require('http');\n\nvar _http2 = _interopRequireDefault(_http);\n\nvar _probabilistic_sampler = require('./probabilistic_sampler.js');\n\nvar _probabilistic_sampler2 = _interopRequireDefault(_probabilistic_sampler);\n\nvar _ratelimiting_sampler = require('./ratelimiting_sampler.js');\n\nvar _ratelimiting_sampler2 = _interopRequireDefault(_ratelimiting_sampler);\n\nvar _per_operation_sampler = require('./per_operation_sampler.js');\n\nvar _per_operation_sampler2 = _interopRequireDefault(_per_operation_sampler);\n\nvar _metrics = require('../metrics/metrics.js');\n\nvar _metrics2 = _interopRequireDefault(_metrics);\n\nvar _logger = require('../logger.js');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _metric_factory = require('../metrics/noop/metric_factory');\n\nvar _metric_factory2 = _interopRequireDefault(_metric_factory);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DEFAULT_INITIAL_SAMPLING_RATE = 0.001;\nvar DEFAULT_REFRESH_INTERVAL = 60000;\nvar DEFAULT_MAX_OPERATIONS = 2000;\nvar DEFAULT_SAMPLING_HOST = '0.0.0.0';\nvar DEFAULT_SAMPLING_PORT = 5778;\nvar PROBABILISTIC_STRATEGY_TYPE = 0;\nvar RATELIMITING_STRATEGY_TYPE = 1;\n\nvar RemoteControlledSampler = function () {\n\n    /**\n     * Creates a sampler remotely controlled by jaeger-agent.\n     *\n     * @param {string} [serviceName] - name of the current service / application, same as given to Tracer\n     * @param {object} [options] - optional settings\n     * @param {object} [options.sampler] - initial sampler to use prior to retrieving strategies from Agent\n     * @param {object} [options.logger] - optional logger, see _flow/logger.js\n     * @param {object} [options.metrics] - instance of Metrics object\n     * @param {number} [options.refreshInterval] - interval in milliseconds before sampling strategy refreshes (0 to not refresh)\n     * @param {string} [options.host] - host for jaeger-agent, defaults to 'localhost'\n     * @param {number} [options.port] - port for jaeger-agent for SamplingManager endpoint\n     * @param {number} [options.maxOperations] - max number of operations to track in PerOperationSampler\n     * @param {function} [options.onSamplerUpdate]\n     */\n    function RemoteControlledSampler(serviceName) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, RemoteControlledSampler);\n\n        this._serviceName = serviceName;\n        this._sampler = options.sampler || new _probabilistic_sampler2.default(DEFAULT_INITIAL_SAMPLING_RATE);\n        this._logger = options.logger || new _logger2.default();\n        this._metrics = options.metrics || new _metrics2.default(new _metric_factory2.default());\n        this._refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        this._host = options.host || DEFAULT_SAMPLING_HOST;\n        this._port = options.port || DEFAULT_SAMPLING_PORT;\n        this._maxOperations = options.maxOperations || DEFAULT_MAX_OPERATIONS;\n\n        this._onSamplerUpdate = options.onSamplerUpdate;\n\n        if (options.refreshInterval !== 0) {\n            var randomDelay = Math.random() * this._refreshInterval;\n            this._initialDelayTimeoutHandle = setTimeout(this._afterInitialDelay.bind(this), randomDelay);\n        }\n    }\n\n    _createClass(RemoteControlledSampler, [{\n        key: 'name',\n        value: function name() {\n            return 'RemoteSampler';\n        }\n    }, {\n        key: 'toString',\n        value: function toString() {\n            return this.name() + '(serviceName=' + this._serviceName + ')';\n        }\n    }, {\n        key: '_afterInitialDelay',\n        value: function _afterInitialDelay() {\n            this._refreshIntervalHandle = setInterval(this._refreshSamplingStrategy.bind(this), this._refreshInterval);\n        }\n    }, {\n        key: '_refreshSamplingStrategy',\n        value: function _refreshSamplingStrategy() {\n            var _this = this;\n\n            var serviceName = encodeURIComponent(this._serviceName);\n            _http2.default.get({\n                'host': this._host,\n                'port': this._port,\n                'path': '/sampling?service=' + serviceName\n            }, function (res) {\n                // explicitly treat incoming data as utf8 (avoids issues with multi-byte chars)\n                res.setEncoding('utf8');\n\n                // incrementally capture the incoming response body\n                var body = '';\n                res.on('data', function (chunk) {\n                    body += chunk;\n                });\n\n                res.on('end', function () {\n                    _this._parseSamplingServerResponse(body);\n                });\n            }).on('error', function (err) {\n                _this._logger.error('Error in fetching sampling strategy: ' + err + '.');\n                _this._metrics.samplerQueryFailure.increment(1);\n            });\n        }\n    }, {\n        key: '_parseSamplingServerResponse',\n        value: function _parseSamplingServerResponse(body) {\n            this._metrics.samplerRetrieved.increment(1);\n            var strategy = void 0;\n            try {\n                strategy = JSON.parse(body);\n                if (!strategy) {\n                    throw 'Malformed response: ' + body;\n                }\n            } catch (error) {\n                this._logger.error('Error in parsing sampling strategy: ' + error + '.');\n                this._metrics.samplerParsingFailure.increment(1);\n                return;\n            }\n            try {\n                if (this._updateSampler(strategy)) {\n                    this._metrics.samplerUpdated.increment(1);\n                }\n            } catch (error) {\n                this._logger.error('Error in updating sampler: ' + error + '.');\n                this._metrics.samplerParsingFailure.increment(1);\n                return;\n            }\n            if (this._onSamplerUpdate) {\n                this._onSamplerUpdate(this._sampler);\n            }\n        }\n    }, {\n        key: '_updateSampler',\n        value: function _updateSampler(response) {\n            if (response.operationSampling) {\n                if (this._sampler instanceof _per_operation_sampler2.default) {\n                    var sampler = this._sampler;\n                    return sampler.update(response.operationSampling);\n                }\n                this._sampler = new _per_operation_sampler2.default(response.operationSampling, this._maxOperations);\n                return true;\n            }\n            var newSampler = void 0;\n            if (response.strategyType === PROBABILISTIC_STRATEGY_TYPE && response.probabilisticSampling) {\n                var samplingRate = response.probabilisticSampling.samplingRate;\n                newSampler = new _probabilistic_sampler2.default(samplingRate);\n            } else if (response.strategyType === RATELIMITING_STRATEGY_TYPE && response.rateLimitingSampling) {\n                var maxTracesPerSecond = response.rateLimitingSampling.maxTracesPerSecond;\n                newSampler = new _ratelimiting_sampler2.default(maxTracesPerSecond);\n            } else {\n                throw 'Malformed response: ' + JSON.stringify(response);\n            }\n\n            if (this._sampler.equal(newSampler)) {\n                return false;\n            }\n            this._sampler = newSampler;\n            return true;\n        }\n    }, {\n        key: 'isSampled',\n        value: function isSampled(operation, tags) {\n            return this._sampler.isSampled(operation, tags);\n        }\n    }, {\n        key: 'close',\n        value: function close(callback) {\n            clearTimeout(this._initialDelayTimeoutHandle);\n            clearInterval(this._refreshIntervalHandle);\n\n            if (callback) {\n                callback();\n            }\n        }\n    }]);\n\n    return RemoteControlledSampler;\n}();\n\nexports.default = RemoteControlledSampler;\n//# sourceMappingURL=remote_sampler.js.map"]}