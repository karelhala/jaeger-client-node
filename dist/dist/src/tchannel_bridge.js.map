{"version":3,"sources":["../../src/tchannel_bridge.js"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_assert","require","_assert2","_interopRequireDefault","_constants","constants","_interopRequireWildcard","_default_context","_default_context2","_span","_span2","_span_context","_span_context2","_util","_util2","_opentracing","_opentracing2","_tracer","_tracer2","_text_map_codec","_text_map_codec2","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","TCHANNEL_TRACING_PREFIX","TChannelBridge","tracer","options","arguments","undefined","equal","_codec","urlEncoding","contextKey","TRACER_STATE_HEADER_NAME","baggagePrefix","TRACER_BAGGAGE_HEADER_PREFIX","_contextFactory","contextFactory","_getSpan","getSpan","ctx","_setSpan","setSpan","span","_tchannelCallbackWrapper","callback","err","res","setTag","Tags","ERROR","log","finish","tracedHandler","handlerFunc","_this","perProcessOptions","request","headers","body","context","operationName","arg1","_extractSpan","PEER_SERVICE","callerName","hostPort","remoteAddr","split","PEER_PORT","parseInt","as","headerKeys","keys","startsWith","wrappingCallback","bind","_wrapTChannelSend","wrappedSend","channel","req","endpoint","childOf","clientSpan","startSpan","serviceName","SPAN_KIND","SPAN_KIND_RPC_CLIENT","inject","_wrapTChannelRequest","wrappedRequestMethod","requestOptions","parent","makeFakeTChannelParentSpan","tchannelRequest","spanContext","tracedChannel","send","traceContext","extract","tags","SPAN_KIND_RPC_SERVER","id","traceid","parentid","flags"],"mappings":"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","file":"tchannel_bridge.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _constants = require('./constants');\n\nvar constants = _interopRequireWildcard(_constants);\n\nvar _default_context = require('./default_context');\n\nvar _default_context2 = _interopRequireDefault(_default_context);\n\nvar _span = require('./span');\n\nvar _span2 = _interopRequireDefault(_span);\n\nvar _span_context = require('./span_context');\n\nvar _span_context2 = _interopRequireDefault(_span_context);\n\nvar _util = require('./util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _opentracing = require('opentracing');\n\nvar _opentracing2 = _interopRequireDefault(_opentracing);\n\nvar _tracer = require('./tracer');\n\nvar _tracer2 = _interopRequireDefault(_tracer);\n\nvar _text_map_codec = require('./propagators/text_map_codec');\n\nvar _text_map_codec2 = _interopRequireDefault(_text_map_codec);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TCHANNEL_TRACING_PREFIX = '$tracing$';\n\nvar TChannelBridge = function () {\n\n    /**\n     * @param {Object} [tracer] - Jaeger Tracer\n     * @param {Object} [options] - options\n     * @param {Function} [options.contextFactory] - function used to create new Context object instead of DefaultContext\n     * @param {Function} [options.getSpan] - function(ctx): Span - used to read Span from Context object; default is ctx.getSpan()\n     * @param {Function} [options.setSpan] - function(ctx, span): void - used to set Span on the Context object; default is ctx.setSpan(span)\n     */\n    function TChannelBridge(tracer) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, TChannelBridge);\n\n        this._tracer = tracer;\n        _assert2.default.equal('object', typeof options === 'undefined' ? 'undefined' : _typeof(options), 'options must be an object');\n        this._codec = new _text_map_codec2.default({\n            urlEncoding: false,\n            contextKey: TCHANNEL_TRACING_PREFIX + constants.TRACER_STATE_HEADER_NAME,\n            baggagePrefix: TCHANNEL_TRACING_PREFIX + constants.TRACER_BAGGAGE_HEADER_PREFIX\n        });\n        this._contextFactory = options.contextFactory || function () {\n            return new _default_context2.default();\n        };\n        this._getSpan = options.getSpan || function (ctx) {\n            return ctx.getSpan();\n        };\n        this._setSpan = options.setSpan || function (ctx, span) {\n            return ctx.setSpan(span);\n        };\n    }\n\n    _createClass(TChannelBridge, [{\n        key: '_tchannelCallbackWrapper',\n        value: function _tchannelCallbackWrapper(span, callback, err, res) {\n            if (err) {\n                span.setTag(_opentracing2.default.Tags.ERROR, true);\n                span.log('error_msg', err);\n            }\n\n            span.finish();\n            return callback(err, res);\n        }\n\n        /**\n         * Wraps a tchannel handler, and takes a context in order to populate the incoming context\n         * with a span.\n         *\n         * @param {Function} [handlerFunc] - a tchannel handler function that responds to an incoming request.\n         * @param {Object} [options] - options to be passed to a span on creation.\n         * @returns {Function} - a function that wrapps the handler in order to automatically populate\n         * a the handler's context with a span.\n         **/\n\n    }, {\n        key: 'tracedHandler',\n        value: function tracedHandler(handlerFunc) {\n            var _this = this;\n\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            return function (perProcessOptions, request, headers, body, callback) {\n                var context = _this._contextFactory();\n                var operationName = options.operationName || request.arg1;\n                var span = _this._extractSpan(operationName, headers);\n\n                // set tags\n                span.setTag(_opentracing2.default.Tags.PEER_SERVICE, request.callerName);\n                var hostPort = request.remoteAddr.split(':');\n                if (hostPort.length == 2) {\n                    span.setTag(_opentracing2.default.Tags.PEER_PORT, parseInt(hostPort[1]));\n                }\n                if (request.headers && request.headers.as) {\n                    span.setTag('as', request.headers.as);\n                }\n\n                _this._setSpan(context, span);\n\n                // remove headers prefixed with $tracing$\n                var headerKeys = Object.keys(headers);\n                for (var i = 0; i < headerKeys.length; i++) {\n                    var key = headerKeys[i];\n                    if (headers.hasOwnProperty(key) && _util2.default.startsWith(key, TCHANNEL_TRACING_PREFIX)) {\n                        delete headers[key];\n                    }\n                }\n\n                var wrappingCallback = _this._tchannelCallbackWrapper.bind(null, span, callback);\n                request.context = context;\n                handlerFunc(perProcessOptions, request, headers, body, wrappingCallback);\n            };\n        }\n    }, {\n        key: '_wrapTChannelSend',\n        value: function _wrapTChannelSend(wrappedSend, channel, req, endpoint, headers, body, callback) {\n            headers = headers || {};\n            var context = req.context || this._contextFactory();\n            var childOf = this._getSpan(context);\n            var clientSpan = this._tracer.startSpan(endpoint, {\n                childOf: childOf // ok if null, will start a new trace\n            });\n            clientSpan.setTag(_opentracing2.default.Tags.PEER_SERVICE, req.serviceName);\n            clientSpan.setTag(_opentracing2.default.Tags.SPAN_KIND, _opentracing2.default.Tags.SPAN_KIND_RPC_CLIENT);\n            this.inject(clientSpan.context(), headers);\n\n            // wrap callback so that span can be finished as soon as the response is received\n            var wrappingCallback = this._tchannelCallbackWrapper.bind(null, clientSpan, callback);\n\n            return wrappedSend.call(channel, req, endpoint, headers, body, wrappingCallback);\n        }\n    }, {\n        key: '_wrapTChannelRequest',\n        value: function _wrapTChannelRequest(channel, wrappedRequestMethod, requestOptions) {\n            // We set the parent to a span with trace_id zero, so that tchannel's\n            // outgoing tracing frame also has a trace id of zero.\n            // This forces other tchannel implementations to rely on the headers for the trace context.\n            requestOptions.parent = { span: TChannelBridge.makeFakeTChannelParentSpan() };\n\n            var tchannelRequest = wrappedRequestMethod.call(channel, requestOptions);\n            tchannelRequest.context = requestOptions.context;\n            return tchannelRequest;\n        }\n\n        /**\n         * Encode given span context as tchannel headers and store into the headers dictionary.\n         * @param {Object} spanContext - Jaeger SpanContext.\n         * @returns {Object} headers - a dictionary with TChannel application headers.\n         */\n\n    }, {\n        key: 'inject',\n        value: function inject(spanContext, headers) {\n            this._codec.inject(spanContext, headers);\n        }\n\n        /**\n         * A function that wraps a json, or thrift encoded channel, in order to populate\n         * the outgoing headers with trace context, and baggage information.\n         *\n         * @param {Object} channel - the encoded channel to be wrapped for tracing.\n         * @returns {Object} channel - the trace wrapped channel.\n         * */\n\n    }, {\n        key: 'tracedChannel',\n        value: function tracedChannel(channel) {\n            var wrappedSend = channel.send;\n            var wrappedRequestMethod = channel.channel.request;\n\n            // We are patching the top level channel request method, not the encoded request method.\n            channel.channel.request = this._wrapTChannelRequest.bind(this, channel.channel, wrappedRequestMethod);\n\n            channel.send = this._wrapTChannelSend.bind(this, wrappedSend, channel);\n            return channel;\n        }\n    }, {\n        key: '_extractSpan',\n        value: function _extractSpan(operationName, headers) {\n            var traceContext = this._codec.extract(headers);\n            var tags = {};\n            tags[_opentracing2.default.Tags.SPAN_KIND] = _opentracing2.default.Tags.SPAN_KIND_RPC_SERVER;\n            var options = {\n                childOf: traceContext,\n                tags: tags\n            };\n            var span = this._tracer.startSpan(operationName, options);\n            return span;\n        }\n    }], [{\n        key: 'makeFakeTChannelParentSpan',\n        value: function makeFakeTChannelParentSpan() {\n            return {\n                id: [0, 0],\n                traceid: [0, 0],\n                parentid: [0, 0],\n                flags: 0\n            };\n        }\n    }]);\n\n    return TChannelBridge;\n}();\n\nexports.default = TChannelBridge;\n//# sourceMappingURL=tchannel_bridge.js.map"]}