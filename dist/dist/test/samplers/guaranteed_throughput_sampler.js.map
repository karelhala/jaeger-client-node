{"version":3,"sources":["../../../test/samplers/guaranteed_throughput_sampler.js"],"names":["_chai","require","_sinon","_sinon2","_interopRequireDefault","_const_sampler","_const_sampler2","_guaranteed_throughput_sampler","_guaranteed_throughput_sampler2","obj","__esModule","default","describe","it","sampler","assert","equal","name","callback","spy","close","calledOnce","isFalse","isOk","expectedTags","forEach","expectedDecision","actualTags","decision","isSampled","deepEqual","isNotOk","assertValues","lb","rate","_lowerBoundSampler","maxTracesPerSecond","_probabilisticSampler","samplingRate","p1","p2","isUpdated","update","strictEqual","isTrue","expectedTagsLB","expectedTagsProb","num","probability","sampled","tags","testCase","s"],"mappings":"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","file":"guaranteed_throughput_sampler.js","sourcesContent":["'use strict';\n\nvar _chai = require('chai');\n\nvar _sinon = require('sinon');\n\nvar _sinon2 = _interopRequireDefault(_sinon);\n\nvar _const_sampler = require('../../src/samplers/const_sampler');\n\nvar _const_sampler2 = _interopRequireDefault(_const_sampler);\n\nvar _guaranteed_throughput_sampler = require('../../src/samplers/guaranteed_throughput_sampler');\n\nvar _guaranteed_throughput_sampler2 = _interopRequireDefault(_guaranteed_throughput_sampler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\ndescribe('GuaranteedThroughput sampler', function () {\n    it('should have a name and be closable', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 0);\n        _chai.assert.equal(sampler.name(), 'GuaranteedThroughputSampler');\n\n        var callback = _sinon2.default.spy();\n        sampler.close(callback);\n        (0, _chai.assert)(callback.calledOnce);\n    });\n\n    it('should not equal other types', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 0);\n        _chai.assert.isFalse(sampler.equal(new _const_sampler2.default(true)));\n        sampler.close();\n    });\n\n    it('should equal itself', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 0);\n        _chai.assert.isOk(sampler.equal(sampler));\n        _chai.assert.isOk(sampler.equal(new _guaranteed_throughput_sampler2.default(2, 0)));\n        sampler.close();\n    });\n\n    it('should provide minimum throughput', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 0);\n\n        var expectedTags = { 'sampler.type': 'lowerbound', 'sampler.param': 0 };\n        [true, true, false].forEach(function (expectedDecision) {\n            var actualTags = {};\n            var decision = sampler.isSampled('testOperationName', actualTags);\n            // We asked for 2 traces per second and 0% probability for the rest.\n            // Since the test runs under one second, we expect 2 successful samples\n            // and one unsuccessful.\n            if (expectedDecision) {\n                _chai.assert.isOk(decision, 'must sample');\n                _chai.assert.deepEqual(expectedTags, actualTags);\n            } else {\n                _chai.assert.isNotOk(decision, 'must not sample');\n                _chai.assert.deepEqual({}, actualTags);\n            }\n        });\n\n        sampler.close();\n    });\n\n    var assertValues = function assertValues(sampler, lb, rate) {\n        _chai.assert.equal(lb, sampler._lowerBoundSampler.maxTracesPerSecond);\n        _chai.assert.equal(rate, sampler._probabilisticSampler.samplingRate);\n    };\n\n    it('should not change when update() called with the same values', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 1.0);\n        assertValues(sampler, 2, 1.0);\n\n        var p1 = sampler._probabilisticSampler;\n        var p2 = sampler._lowerBoundSampler;\n        var isUpdated = sampler.update(2, 1.0);\n        _chai.assert.isFalse(isUpdated);\n        _chai.assert.strictEqual(sampler._probabilisticSampler, p1);\n        _chai.assert.strictEqual(sampler._lowerBoundSampler, p2);\n        assertValues(sampler, 2, 1.0);\n    });\n\n    it('should update only lower bound', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 1.0);\n        assertValues(sampler, 2, 1.0);\n\n        // should only change lower bound\n        var p1 = sampler._probabilisticSampler;\n        var p2 = sampler._lowerBoundSampler;\n        var isUpdated = sampler.update(3, 1.0);\n        _chai.assert.isTrue(isUpdated);\n        _chai.assert.strictEqual(sampler._probabilisticSampler, p1);\n        _chai.assert.isNotOk(p2 === sampler._lowerBoundSampler);\n        assertValues(sampler, 3, 1.0);\n    });\n\n    it('should update only sampling rate', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 1.0);\n        assertValues(sampler, 2, 1.0);\n\n        var p1 = sampler._probabilisticSampler;\n        var p2 = sampler._lowerBoundSampler;\n        var isUpdated = sampler.update(2, 0.9);\n        _chai.assert.isTrue(isUpdated);\n        _chai.assert.isNotOk(p1 === sampler._probabilisticSampler);\n        _chai.assert.strictEqual(sampler._lowerBoundSampler, p2);\n        assertValues(sampler, 2, 0.9);\n    });\n\n    it('should become probabilistic after minimum throughput', function () {\n        var sampler = new _guaranteed_throughput_sampler2.default(2, 1.0);\n\n        var expectedTagsLB = { 'sampler.type': 'lowerbound', 'sampler.param': 0.0 };\n        var expectedTagsProb = { 'sampler.type': 'probabilistic', 'sampler.param': 1.0 };\n\n        // The sampler is setup with 2 traces per second and 100% probability otherwise.\n        // The 100% probability takes precedence over lower-bound, so we manipulate\n        // the probability for every iteration.\n        [\n        // 100% probability triggers probabilistic sampler\n        { num: 1, probability: 1, sampled: true, tags: expectedTagsProb },\n        // 0% probability triggers lower-bound sampler\n        { num: 2, probability: 0, sampled: true, tags: expectedTagsLB },\n        // 0% probability results in sampled=false because rate limit was reached \n        { num: 3, probability: 0, sampled: false, tags: {} },\n        // 100% probability triggers probabilitic sampler again\n        { num: 4, probability: 1, sampled: true, tags: expectedTagsProb }].forEach(function (testCase) {\n            // override probability, and do a sanity check\n            var s = sampler._lowerBoundSampler;\n            sampler.update(2, testCase.probability);\n            _chai.assert.strictEqual(s, sampler._lowerBoundSampler, 'lower bound sampled unchanged');\n            _chai.assert.equal(sampler._probabilisticSampler.samplingRate, testCase.probability);\n\n            var expectedDecision = testCase.sampled;\n            var expectedTags = testCase.tags;\n\n            var actualTags = {};\n            var decision = sampler.isSampled('testOperationName', actualTags);\n            if (expectedDecision) {\n                _chai.assert.isOk(decision, 'must sample, test case ' + testCase.num);\n                _chai.assert.deepEqual(expectedTags, actualTags, 'must match tags, test case ' + testCase.num);\n            } else {\n                _chai.assert.isNotOk(decision, 'must not sample, test case ' + testCase.num);\n                _chai.assert.deepEqual({}, actualTags, 'must not have tags, test case ' + testCase.num);\n            }\n        });\n\n        sampler.close();\n    });\n});\n//# sourceMappingURL=guaranteed_throughput_sampler.js.map"]}