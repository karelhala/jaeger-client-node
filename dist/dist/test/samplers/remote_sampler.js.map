{"version":3,"sources":["../../../test/samplers/remote_sampler.js"],"names":["_chai","require","_sinon","_sinon2","_interopRequireDefault","_metrics","_metrics2","_ratelimiting_sampler","_ratelimiting_sampler2","_probabilistic_sampler","_probabilistic_sampler2","_per_operation_sampler","_per_operation_sampler2","_remote_sampler","_remote_sampler2","_mock_logger","_mock_logger2","_sampler_server","_sampler_server2","_metric_factory","_metric_factory2","_backend","_backend2","obj","__esModule","default","describe","server","logger","metrics","remoteSampler","before","start","after","close","beforeEach","clearStrategies","refreshInterval","afterEach","it","done","samplerQueryFailure","increment","assert","equal","_errorMsgs","length","_host","_refreshSamplingStrategy","badResponses","forEach","resp","samplerParsingFailure","addStrategy","_serviceName","_onSamplerUpdate","s","_samplingRate","counterValue","samplerRetrieved","samplerUpdated","firstSampler","strictEqual","strategyType","probabilisticSampling","samplingRate","maxTracesPerSecond","isOk","rateLimitingSampling","operationSampling","defaultSamplingProbability","defaultLowerBoundTracesPerSecond","perOperationStrategies","s2","clock","useFakeTimers","sampler","onSamplerUpdate","notEqual","isTrue","_sampler","toString","restore","tick"],"mappings":"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","file":"remote_sampler.js","sourcesContent":["'use strict';\n\nvar _chai = require('chai');\n\nvar _sinon = require('sinon');\n\nvar _sinon2 = _interopRequireDefault(_sinon);\n\nvar _metrics = require('../../src/metrics/metrics.js');\n\nvar _metrics2 = _interopRequireDefault(_metrics);\n\nvar _ratelimiting_sampler = require('../../src/samplers/ratelimiting_sampler');\n\nvar _ratelimiting_sampler2 = _interopRequireDefault(_ratelimiting_sampler);\n\nvar _probabilistic_sampler = require('../../src/samplers/probabilistic_sampler.js');\n\nvar _probabilistic_sampler2 = _interopRequireDefault(_probabilistic_sampler);\n\nvar _per_operation_sampler = require('../../src/samplers/per_operation_sampler');\n\nvar _per_operation_sampler2 = _interopRequireDefault(_per_operation_sampler);\n\nvar _remote_sampler = require('../../src/samplers/remote_sampler');\n\nvar _remote_sampler2 = _interopRequireDefault(_remote_sampler);\n\nvar _mock_logger = require('../lib/mock_logger');\n\nvar _mock_logger2 = _interopRequireDefault(_mock_logger);\n\nvar _sampler_server = require('../lib/sampler_server');\n\nvar _sampler_server2 = _interopRequireDefault(_sampler_server);\n\nvar _metric_factory = require('../lib/metrics/local/metric_factory.js');\n\nvar _metric_factory2 = _interopRequireDefault(_metric_factory);\n\nvar _backend = require('../lib/metrics/local/backend.js');\n\nvar _backend2 = _interopRequireDefault(_backend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\ndescribe('RemoteSampler', function () {\n    var server = void 0;\n    var logger = void 0;\n    var metrics = void 0;\n    var remoteSampler = void 0;\n\n    before(function () {\n        server = new _sampler_server2.default().start();\n    });\n\n    after(function () {\n        server.close();\n    });\n\n    beforeEach(function () {\n        server.clearStrategies();\n        logger = new _mock_logger2.default();\n        metrics = new _metrics2.default(new _metric_factory2.default());\n        remoteSampler = new _remote_sampler2.default('service1', {\n            refreshInterval: 0,\n            metrics: metrics,\n            logger: logger\n        });\n    });\n\n    afterEach(function () {\n        remoteSampler.close();\n    });\n\n    it('should log metric on failing to query for sampling strategy', function (done) {\n        metrics.samplerQueryFailure.increment = function () {\n            _chai.assert.equal(logger._errorMsgs.length, 1, 'errors=' + logger._errorMsgs);\n            done();\n        };\n        remoteSampler._host = 'fake-host';\n        remoteSampler._refreshSamplingStrategy();\n    });\n\n    var badResponses = ['junk', '0', 'false', {}];\n    badResponses.forEach(function (resp) {\n        it('should log metric on failing to parse bad http response ' + resp, function (done) {\n            metrics.samplerParsingFailure.increment = function () {\n                _chai.assert.equal(logger._errorMsgs.length, 1, 'errors=' + logger._errorMsgs);\n                done();\n            };\n            server.addStrategy('service1', resp);\n            remoteSampler._refreshSamplingStrategy();\n        });\n    });\n\n    it('should throw error on bad sampling strategy', function (done) {\n        metrics.samplerParsingFailure.increment = function () {\n            _chai.assert.equal(logger._errorMsgs.length, 1);\n            done();\n        };\n        remoteSampler._serviceName = 'bad-service';\n        remoteSampler._refreshSamplingStrategy();\n    });\n\n    it('should set probabilistic sampler, but only once', function (done) {\n        remoteSampler._onSamplerUpdate = function (s) {\n            _chai.assert.equal(s._samplingRate, 1.0);\n            _chai.assert.equal(_backend2.default.counterValue(metrics.samplerRetrieved), 1);\n            _chai.assert.equal(_backend2.default.counterValue(metrics.samplerUpdated), 1);\n\n            var firstSampler = s;\n\n            // prepare for second update\n            remoteSampler._onSamplerUpdate = function (s) {\n                _chai.assert.strictEqual(s, firstSampler, 'must not have changed the sampler');\n\n                _chai.assert.equal(_backend2.default.counterValue(metrics.samplerRetrieved), 2);\n                _chai.assert.equal(_backend2.default.counterValue(metrics.samplerUpdated), 1);\n\n                // prepare for third update - for test coverage only\n                remoteSampler._onSamplerUpdate = null;\n                remoteSampler._refreshSamplingStrategy();\n\n                done();\n            };\n\n            remoteSampler._refreshSamplingStrategy();\n        };\n        server.addStrategy('service1', {\n            strategyType: 0,\n            probabilisticSampling: {\n                samplingRate: 1.0\n            }\n        });\n        remoteSampler._refreshSamplingStrategy();\n    });\n\n    it('should set ratelimiting sampler', function (done) {\n        var maxTracesPerSecond = 10;\n        remoteSampler._onSamplerUpdate = function (s) {\n            _chai.assert.isOk(s.equal(new _ratelimiting_sampler2.default(maxTracesPerSecond)));\n            done();\n        };\n        server.addStrategy('service1', {\n            strategyType: 1,\n            rateLimitingSampling: {\n                maxTracesPerSecond: maxTracesPerSecond\n            }\n        });\n        remoteSampler._refreshSamplingStrategy();\n    });\n\n    it('should set per-operation sampler', function (done) {\n        server.addStrategy('service1', {\n            strategyType: 0,\n            probabilisticSampling: {\n                samplingRate: 1.0\n            },\n            operationSampling: {\n                defaultSamplingProbability: 0.05,\n                defaultLowerBoundTracesPerSecond: 0.1,\n                perOperationStrategies: []\n            }\n        });\n        remoteSampler._onSamplerUpdate = function (s) {\n            _chai.assert.isOk(s instanceof _per_operation_sampler2.default);\n            _chai.assert.equal(_backend2.default.counterValue(metrics.samplerRetrieved), 1);\n            _chai.assert.equal(_backend2.default.counterValue(metrics.samplerUpdated), 1);\n\n            // cause a second refresh without changes\n            remoteSampler._onSamplerUpdate = function (s2) {\n                _chai.assert.strictEqual(s2, s);\n                _chai.assert.equal(_backend2.default.counterValue(metrics.samplerRetrieved), 2, 'second retrieval');\n                _chai.assert.equal(_backend2.default.counterValue(metrics.samplerUpdated), 1, 'but no update');\n                done();\n            };\n            remoteSampler._refreshSamplingStrategy();\n        };\n        remoteSampler._refreshSamplingStrategy();\n    });\n\n    it('should refresh periodically', function (done) {\n        server.addStrategy('service1', {\n            strategyType: 0,\n            probabilisticSampling: {\n                samplingRate: 0.777\n            }\n        });\n\n        var clock = _sinon2.default.useFakeTimers();\n\n        var sampler = new _remote_sampler2.default('service1', {\n            refreshInterval: 10, // 10ms\n            metrics: metrics,\n            logger: logger,\n            onSamplerUpdate: function onSamplerUpdate(s) {\n                _chai.assert.notEqual(_backend2.default.counterValue(metrics.samplerRetrieved), 0);\n                _chai.assert.notEqual(_backend2.default.counterValue(metrics.samplerUpdated), 0);\n                _chai.assert.equal(logger._errorMsgs.length, 0, 'number of error logs');\n                _chai.assert.isTrue(sampler._sampler.equal(new _probabilistic_sampler2.default(0.777)), sampler._sampler.toString());\n\n                clock.restore();\n\n                sampler._onSamplerUpdate = null;\n                sampler.close(done);\n            }\n        });\n\n        clock.tick(20);\n    });\n}); // Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//# sourceMappingURL=remote_sampler.js.map"]}