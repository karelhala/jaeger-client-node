{"version":3,"sources":["../../../src/samplers/per_operation_sampler.js"],"names":["constants","PerOperationSampler","strategies","maxOperations","_maxOperations","_samplersByOperation","Object","create","update","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","updated","_defaultLowerBound","perOperationStrategies","forEach","strategy","operation","samplingRate","probabilisticSampling","sampler","defaultSamplingRate","_defaultSampler","name","tags","keys","length","isSampled","other","callback"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;IACqBC,mB;AAMjB,iCAAYC,UAAZ,EAAwDC,aAAxD,EAA+E;AAAA;;AAC3E,aAAKC,cAAL,GAAsBD,aAAtB;AACA,aAAKE,oBAAL,GAA4BC,OAAOC,MAAP,CAAc,IAAd,CAA5B;AACA,aAAKC,MAAL,CAAYN,UAAZ;AACH;;;;+BAEMA,U,EAAqD;AAAA;;AACxD,kCACI,OAAOA,WAAWO,gCAAlB,KAAuD,QAD3D,EAEI,mEAFJ;AAIA,kCACI,OAAOP,WAAWQ,0BAAlB,KAAiD,QADrD,EAEI,6DAFJ;;AAKA,gBAAIC,UAAmB,KAAKC,kBAAL,KAA4BV,WAAWO,gCAA9D;AACA,iBAAKG,kBAAL,GAA0BV,WAAWO,gCAArC;AACAP,uBAAWW,sBAAX,CAAkCC,OAAlC,CAA0C,UAACC,QAAD,EAAc;AACpD,oBAAIC,YAAYD,SAASC,SAAzB;AACA,oBAAIC,eAAeF,SAASG,qBAAT,CAA+BD,YAAlD;AACA,oBAAIE,UAAU,MAAKd,oBAAL,CAA0BW,SAA1B,CAAd;AACA,oBAAIG,OAAJ,EAAa;AACT,wBAAIA,QAAQX,MAAR,CAAe,MAAKI,kBAApB,EAAwCK,YAAxC,CAAJ,EAA2D;AACvDN,kCAAU,IAAV;AACH;AACJ,iBAJD,MAIQ;AACJQ,8BAAU,4CAAgC,MAAKP,kBAArC,EAAyDK,YAAzD,CAAV;AACA,0BAAKZ,oBAAL,CAA0BW,SAA1B,IAAuCG,OAAvC;AACAR,8BAAU,IAAV;AACH;AACJ,aAbD;AAcA,gBAAIS,sBAAsBlB,WAAWQ,0BAArC;AACA,gBAAI,CAAC,KAAKW,eAAN,IAAyB,KAAKA,eAAL,CAAqBJ,YAArB,IAAqCG,mBAAlE,EAAuF;AACnF,qBAAKC,eAAL,GAAuB,oCAAyBD,mBAAzB,CAAvB;AACAT,0BAAU,IAAV;AACH;AACD,mBAAOA,OAAP;AACH;;;+BAEc;AACX,mBAAO,qBAAP;AACH;;;mCAEkB;AACf,mBAAU,KAAKW,IAAL,EAAV,uBAAuC,KAAKlB,cAA5C;AACH;;;kCAESY,S,EAAmBO,I,EAAoB;AAC7C,gBAAIJ,UAAmB,KAAKd,oBAAL,CAA0BW,SAA1B,CAAvB;AACA,gBAAI,CAACG,OAAL,EAAc;AACV,oBAAIb,OAAOkB,IAAP,CAAY,KAAKnB,oBAAjB,EAAuCoB,MAAvC,IAAiD,KAAKrB,cAA1D,EAA0E;AACtE,2BAAO,KAAKiB,eAAL,CAAqBK,SAArB,CAA+BV,SAA/B,EAA0CO,IAA1C,CAAP;AACH;AACDJ,0BAAU,4CACN,KAAKP,kBADC,EAEN,KAAKS,eAAL,CAAqBJ,YAFf,CAAV;AAIA,qBAAKZ,oBAAL,CAA0BW,SAA1B,IAAuCG,OAAvC;AACH;AACD,mBAAOA,QAAQO,SAAR,CAAkBV,SAAlB,EAA6BO,IAA7B,CAAP;AACH;;;8BAEKI,K,EAAyB;AAC3B,mBAAO,KAAP,CAD2B,CACb;AACjB;;;8BAEKC,Q,EAA2B;AAC7B;AACA,gBAAIA,QAAJ,EAAc;AACVA;AACH;AACJ;;;;;;kBA9EgB3B,mB","file":"per_operation_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from 'assert';\nimport * as constants from '../constants.js';\nimport ProbabilisticSampler from './probabilistic_sampler.js';\nimport GuaranteedThroughputSampler from './guaranteed_throughput_sampler.js';\n\ntype SamplersByOperation = { [key: string]: GuaranteedThroughputSampler };\n\n// PerOperationSampler keeps track of all operation names it is asked to sample\n// and uses GuaranteedThroughputSampler for each operation name to ensure\n// that all endpoints are represented in the sampled traces. If the number\n// of distinct operation names exceeds maxOperations, all other names are\n// sampled with a default probabilistic sampler.\nexport default class PerOperationSampler {\n    _maxOperations:        number;\n    _samplersByOperation:  SamplersByOperation;\n    _defaultSampler:       ProbabilisticSampler;\n    _defaultLowerBound:    number;\n\n    constructor(strategies: PerOperationSamplingStrategies, maxOperations: number) {\n        this._maxOperations = maxOperations;\n        this._samplersByOperation = Object.create(null);\n        this.update(strategies);\n    }\n\n    update(strategies: PerOperationSamplingStrategies): boolean {\n        assert(\n            typeof strategies.defaultLowerBoundTracesPerSecond === 'number',\n            'expected strategies.defaultLowerBoundTracesPerSecond to be number'\n        );\n        assert(\n            typeof strategies.defaultSamplingProbability === 'number',\n            'expected strategies.defaultSamplingProbability to be number'\n        );\n\t\t\n        let updated: boolean = this._defaultLowerBound !== strategies.defaultLowerBoundTracesPerSecond;\n        this._defaultLowerBound = strategies.defaultLowerBoundTracesPerSecond;\n        strategies.perOperationStrategies.forEach((strategy) => {\n            let operation = strategy.operation;\n            let samplingRate = strategy.probabilisticSampling.samplingRate;\n            let sampler = this._samplersByOperation[operation];\n            if (sampler) {\n                if (sampler.update(this._defaultLowerBound, samplingRate)) {\n                    updated = true;\n                }\n            }  else {\n                sampler = new GuaranteedThroughputSampler(this._defaultLowerBound, samplingRate);\n                this._samplersByOperation[operation] = sampler;\n                updated = true;\n            }\n        });\n        let defaultSamplingRate = strategies.defaultSamplingProbability;\n        if (!this._defaultSampler || this._defaultSampler.samplingRate != defaultSamplingRate) {\n            this._defaultSampler = new ProbabilisticSampler(defaultSamplingRate);\n            updated = true;\n        }\n        return updated;\n    }\n\n    name(): string {\n        return 'PerOperationSampler';\n    }\n\n    toString(): string {\n        return `${this.name()}(maxOperations=${this._maxOperations})`;\n    }\n\n    isSampled(operation: string, tags: any): boolean {\n        let sampler: Sampler = this._samplersByOperation[operation];\n        if (!sampler) {\n            if (Object.keys(this._samplersByOperation).length >= this._maxOperations) {\n                return this._defaultSampler.isSampled(operation, tags);\n            }\n            sampler = new GuaranteedThroughputSampler(\n                this._defaultLowerBound, \n                this._defaultSampler.samplingRate\n            );\n            this._samplersByOperation[operation] = sampler;\n        }\n        return sampler.isSampled(operation, tags);\n    }\n\n    equal(other: Sampler): boolean {\n        return false; // TODO equal should be removed\n    }\n\n    close(callback: ?Function): void {\n        // all nested samplers are of simple types, so we do not need to Close them\n        if (callback) {\n            callback();\n        }\n    }\n}\n"]}