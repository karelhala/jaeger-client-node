{"version":3,"sources":["../../../src/samplers/probabilistic_sampler.js"],"names":["constants","ProbabilisticSampler","samplingRate","Error","_samplingRate","name","operation","tags","decision","random","SAMPLER_TYPE_TAG_KEY","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_PARAM_TAG_KEY","Math","other","callback"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAAYA,S;;;;;;IAESC,oB;AAGjB,kCAAYC,YAAZ,EAAkC;AAAA;;AAC9B,YAAIA,eAAe,GAAf,IAAsBA,eAAe,GAAzC,EAA8C;AAC1C,kBAAM,IAAIC,KAAJ,6EAAoFD,YAApF,CAAN;AACH;;AAED,aAAKE,aAAL,GAAqBF,YAArB;AACH;;;;+BAEc;AACX,mBAAO,sBAAP;AACH;;;mCAEkB;AACf,mBAAU,KAAKG,IAAL,EAAV,sBAAsC,KAAKD,aAA3C;AACH;;;kCAMSE,S,EAAmBC,I,EAAoB;AAC7C,gBAAIC,WAAW,KAAKC,MAAL,KAAgB,KAAKL,aAApC;AACA,gBAAII,QAAJ,EAAc;AACVD,qBAAKP,UAAUU,oBAAf,IAAuCV,UAAUW,0BAAjD;AACAJ,qBAAKP,UAAUY,qBAAf,IAAwC,KAAKR,aAA7C;AACH;AACD,mBAAOI,QAAP;AACH;;;iCAEgB;AACb,mBAAOK,KAAKJ,MAAL,EAAP;AACH;;;8BAEKK,K,EAAyB;AAC3B,gBAAI,EAAEA,iBAAiBb,oBAAnB,CAAJ,EAA8C;AAC1C,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAKC,YAAL,KAAsBY,MAAMZ,YAAnC;AACH;;;8BAEKa,Q,EAA2B;AAC7B,gBAAIA,QAAJ,EAAc;AACVA;AACH;AACJ;;;4BA7B0B;AACvB,mBAAO,KAAKX,aAAZ;AACH;;;;;;kBArBgBH,oB","file":"probabilistic_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as constants from '../constants.js';\n\nexport default class ProbabilisticSampler {\n    _samplingRate: number;\n\n    constructor(samplingRate: number) {\n        if (samplingRate < 0.0 || samplingRate > 1.0) {\n            throw new Error(`The sampling rate must be less than 0.0 and greater than 1.0. Received ${samplingRate}`);\n        }\n\n        this._samplingRate = samplingRate;\n    }\n\n    name(): string {\n        return 'ProbabilisticSampler';\n    }\n\n    toString(): string {\n        return `${this.name()}(samplingRate=${this._samplingRate})`;\n    }\n\n    get samplingRate(): number {\n        return this._samplingRate;\n    }\n\n    isSampled(operation: string, tags: any): boolean {\n        let decision = this.random() < this._samplingRate;\n        if (decision) {\n            tags[constants.SAMPLER_TYPE_TAG_KEY] = constants.SAMPLER_TYPE_PROBABILISTIC;\n            tags[constants.SAMPLER_PARAM_TAG_KEY] = this._samplingRate;\n        }\n        return decision;\n    }\n\n    random(): number {\n        return Math.random();\n    }\n\n    equal(other: Sampler): boolean {\n        if (!(other instanceof ProbabilisticSampler)) {\n            return false;\n        }\n\n        return this.samplingRate === other.samplingRate;\n    }\n\n    close(callback: ?Function): void {\n        if (callback) {\n            callback();\n        }\n    }\n}\n"]}