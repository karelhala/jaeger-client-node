{"version":3,"sources":["../../../src/reporters/in_memory_reporter.js"],"names":["InMemoryReporter","_spans","span","push","callback","serviceName","tags","_process","getThriftTags"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AACA;;;;;;;;IAEqBA,gB;AAIjB,gCAAc;AAAA;;AACV,aAAKC,MAAL,GAAc,EAAd;AACH;;;;+BAEc;AACX,mBAAO,kBAAP;AACH;;;+BAEMC,I,EAAkB;AACrB,iBAAKD,MAAL,CAAYE,IAAZ,CAAiBD,IAAjB;AACH;;;gCAMa;AACV,iBAAKD,MAAL,GAAc,EAAd;AACH;;;8BAEKG,Q,EAA2B;AAC7B,gBAAIA,QAAJ,EAAc;AACVA;AACH;AACJ;;;mCAEUC,W,EAAqBC,I,EAAwB;AACpD,iBAAKC,QAAL,GAAgB;AACZ,+BAAeF,WADH;AAEZ,wBAAQ,iBAAYG,aAAZ,CAA0BF,IAA1B;AAFI,aAAhB;AAIH;;;4BAnBwB;AACrB,mBAAO,KAAKL,MAAZ;AACH;;;;;;kBAlBgBD,gB","file":"in_memory_reporter.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Span from '../span.js';\nimport ThriftUtils from '../thrift.js';\n\nexport default class InMemoryReporter {\n    _spans: Array<Span>;\n    _process: Process;\n\n    constructor() {\n        this._spans = [];\n    }\n\n    name(): string {\n        return 'InMemoryReporter';\n    }\n\n    report(span: Span): void {\n        this._spans.push(span);\n    }\n\n    get spans(): Array<Span> {\n        return this._spans;\n    }\n\n    clear(): void {\n        this._spans = [];\n    }\n\n    close(callback: ?Function): void {\n        if (callback) {\n            callback();\n        }\n    }\n\n    setProcess(serviceName: string, tags: Array<Tag>): void {\n        this._process = {\n            'serviceName': serviceName,\n            'tags': ThriftUtils.getThriftTags(tags)\n        };\n    }\n}\n"]}