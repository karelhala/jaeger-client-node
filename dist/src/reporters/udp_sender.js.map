{"version":3,"sources":["../../../src/reporters/udp_sender.js"],"names":["HOST","PORT","UDP_PACKET_MAX_LENGTH","UDPSender","options","_host","host","_port","port","_maxPacketSize","maxPacketSize","_byteBufferSize","_client","createSocket","_spec","readFileSync","join","__dirname","_thrift","source","allowOptionalArguments","batch","Agent","emitBatch","argumentsMessageRW","byteLength","_convertBatchToThriftMessage","_batch","length","span","Span","rw","process","_process","tagMessages","j","tags","tag","push","Tag","_thriftProcessMessage","Process","serviceName","_emitSpanBatchOverhead","_calcBatchSize","_maxSpanBytes","spanSize","_calcSpanSize","err","numSpans","spans","flush","flushResponse","bufferLen","thriftBuffer","Buffer","bufferResult","writeInto","console","log","send","_reset","spanMessages","i","ArgumentsMessage","version","id","body","Batch","close"],"mappings":"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","file":"udp_sender.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport path from 'path';\nimport {Thrift} from 'thriftrw';\n\nconst HOST = 'localhost';\nconst PORT =  6832;\nconst UDP_PACKET_MAX_LENGTH = 65000;\n\nexport default class UDPSender {\n    _host: string;\n    _port: number;\n    _maxPacketSize: number;\n    _process: Process;\n    _emitSpanBatchOverhead: number;\n    _maxSpanBytes: number;\n    _client: any;\n    _spec: any;\n    _byteBufferSize: number;\n    _thrift: any;\n    _batch: Batch;\n    _thriftProcessMessage: any;\n\n    constructor(options: any = {}) {\n        this._host = options.host || HOST;\n        this._port = options.port || PORT;\n        this._maxPacketSize = options.maxPacketSize || UDP_PACKET_MAX_LENGTH;\n        this._byteBufferSize = 0;\n        this._client = dgram.createSocket('udp4');\n        this._spec = fs.readFileSync(path.join(__dirname, '../jaeger-idl/thrift/jaeger.thrift'), 'ascii');\n        this._thrift = new Thrift({\n            source: this._spec,\n            allowOptionalArguments: true\n        });\n    }\n\n    _calcBatchSize(batch: Batch) {\n        return this._thrift.Agent.emitBatch.argumentsMessageRW.byteLength(\n            this._convertBatchToThriftMessage(this._batch)\n        ).length;\n    }\n\n    _calcSpanSize(span: any): number {\n        return this._thrift.Span.rw.byteLength(new this._thrift.Span(span)).length;\n    }\n\n    setProcess(process: Process): void {\n        // This function is only called once during reporter construction, and thus will\n        // give us the length of the batch before any spans have been added to the span\n        // list in batch.\n        this._process = process;\n        this._batch = {\n            'process': this._process,\n            'spans': []\n        };\n\n        let tagMessages = [];\n        for (let j = 0; j < this._batch.process.tags.length; j++) {\n            let tag = this._batch.process.tags[j];\n            tagMessages.push(new this._thrift.Tag(tag));\n        }\n\n        this._thriftProcessMessage = new this._thrift.Process({\n            serviceName: this._batch.process.serviceName,\n            tags: tagMessages\n        });\n        this._emitSpanBatchOverhead = this._calcBatchSize(this._batch);\n        this._maxSpanBytes = this._maxPacketSize - this._emitSpanBatchOverhead;\n    }\n\n    append(span: any): SenderResponse {\n        let spanSize: number = this._calcSpanSize(span);\n        if (spanSize > this._maxSpanBytes) {\n            return { err: true, numSpans: 1 };\n        }\n\n        this._byteBufferSize += spanSize;\n        if (this._byteBufferSize <= this._maxSpanBytes) {\n            this._batch.spans.push(span);\n            if (this._byteBufferSize < this._maxSpanBytes) {\n                return {err: false, numSpans: 0};\n            }\n            return this.flush();\n        }\n\n        let flushResponse: SenderResponse = this.flush();\n        this._batch.spans.push(span);\n        this._byteBufferSize = spanSize;\n        return flushResponse;\n    }\n\n    flush(): SenderResponse {\n        let numSpans: number = this._batch.spans.length;\n        if (numSpans == 0) {\n            return {err: false, numSpans: 0}\n        }\n\n        let bufferLen = this._byteBufferSize + this._emitSpanBatchOverhead;\n        let thriftBuffer = new Buffer(bufferLen);\n        let bufferResult = this._thrift.Agent.emitBatch.argumentsMessageRW.writeInto(\n            this._convertBatchToThriftMessage(this._batch), thriftBuffer, 0\n        );\n\n        if (bufferResult.err) {\n            console.log('err', bufferResult.err);\n            return {err: true, numSpans: numSpans};\n        }\n\n        // TODO(oibe) use callback in send\n        this._client.send(thriftBuffer, 0, thriftBuffer.length, this._port, this._host);\n        this._reset();\n\n        return {err: false, numSpans: numSpans};\n    }\n\n    _convertBatchToThriftMessage() {\n        let spanMessages = [];\n        for (let i = 0; i < this._batch.spans.length; i++) {\n            let span = this._batch.spans[i];\n            spanMessages.push(new this._thrift.Span(span))\n        }\n\n        return new this._thrift.Agent.emitBatch.ArgumentsMessage({\n            version: 1,\n            id: 0,\n            body: {batch: new this._thrift.Batch({\n                    process: this._thriftProcessMessage,\n                    spans: spanMessages\n            })}\n        });\n    }\n\n    _reset() {\n        this._batch.spans = [];\n        this._byteBufferSize = 0;\n    }\n\n    close(): void {\n        this._client.close();\n    }\n}\n"]}