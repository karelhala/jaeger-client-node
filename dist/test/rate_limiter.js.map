{"version":3,"sources":["../../test/rate_limiter.js"],"names":["describe","it","initialDate","Date","getTime","clock","useFakeTimers","limiter","i","equal","checkCredit","restore","limit","cost"],"mappings":";;AAoBA;;AACA;;;;AACA;;;;;;AAEAA,SAAU,iCAAV,EAA6C,YAAM;AAC/CC,OAAG,8BAAH,EAAmC,YAAM;AACrC,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,2BAAgB,EAAhB,EAAoB,EAApB,CAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzB,yBAAOC,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACH;AACD,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;;AAEAL,cAAMM,OAAN;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,IAAlC,CAAR;AACA,aAAK,IAAIM,KAAI,CAAb,EAAgBA,KAAI,EAApB,EAAwBA,IAAxB,EAA6B;AACzB,yBAAOC,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACH;AACD,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;AACAL,cAAMM,OAAN;AACH,KAhBD;;AAkBAV,OAAG,4BAAH,EAAiC,YAAM;AACnC,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIU,QAAQ,GAAZ;AACA,YAAIC,OAAO,IAAID,KAAf;AACA,YAAIL,UAAU,2BAAgB,CAAhB,EAAmB,CAAnB,CAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAII,KAApB,EAA2BJ,GAA3B,EAAgC;AAC5BD,oBAAQG,WAAR,CAAoBG,IAApB;AACH;;AAED,qBAAOJ,KAAP,CAAaF,QAAQG,WAAR,CAAoBG,IAApB,CAAb,EAAwC,KAAxC,EAA+C,kCAA/C;;AAEAR,cAAMM,OAAN;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,IAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,WAAR,CAAoBG,IAApB,CAAb,EAAwC,IAAxC,EAA8C,iCAA9C;AACAR,cAAMM,OAAN;AACH,KAhBD;;AAkBAV,OAAG,2CAAH,EAAgD,YAAM;AAClD,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,2BAAgB,GAAhB,EAAqB,CAArB,CAAd;AACA,qBAAOE,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;;AAEAL,cAAMM,OAAN;AACA;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,KAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACA,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;AACAL,cAAMM,OAAN;AACH,KAZD;AAaH,CAlDD,E,CAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rate_limiter.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {assert} from 'chai';\nimport RateLimiter from '../src/rate_limiter';\nimport sinon from 'sinon';\n\ndescribe ('leaky bucket ratelimiter should', () => {\n    it('block after threshold is met', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limiter = new RateLimiter(10, 10);\n        for (let i = 0; i < 10; i++) {\n            assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        }\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n\n        clock.restore();\n        clock = sinon.useFakeTimers(initialDate + 1000);\n        for (let i = 0; i < 10; i++) {\n            assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        }\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n        clock.restore();\n    });\n\n    it('work for fractional values', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limit = 500;\n        let cost = 1 / limit;\n        let limiter = new RateLimiter(1, 1);\n        for (let i = 0; i < limit; i++) {\n            limiter.checkCredit(cost);\n        }\n\n        assert.equal(limiter.checkCredit(cost), false, 'expected checkCredit to be false');\n\n        clock.restore();\n        clock = sinon.useFakeTimers(initialDate + 1000);\n        assert.equal(limiter.checkCredit(cost), true, 'expected checkCredit to be true');\n        clock.restore();\n    });\n\n    it('work with creditsPerSecond smaller than 1', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limiter = new RateLimiter(0.1, 1);\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n\n        clock.restore();\n        // move time 20s forward, enough to accumulate credits for 2 messages, but it should still be capped at 1\n        clock = sinon.useFakeTimers(initialDate + 20000);\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n        clock.restore();\n    });\n});\n"]}