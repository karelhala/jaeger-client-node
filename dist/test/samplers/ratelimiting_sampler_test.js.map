{"version":3,"sources":["../../../test/samplers/ratelimiting_sampler_test.js"],"names":["describe","it","initialDate","Date","getTime","clock","useFakeTimers","sampler","i","equal","isSampled","maxTracesPerSecond","isNotOk","tags","decision","deepEqual","restore","to","throw","otherSampler","isOk"],"mappings":";;AAqBA;;AACA;;;;AACA;;;;AACA;;;;;;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOAA,SAAU,4BAAV,EAAwC,YAAM;AAC1CC,OAAG,8BAAH,EAAmC,YAAM;AACrC,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,mCAAwB,EAAxB,CAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzB,yBAAOC,KAAP,CAAaF,QAAQG,SAAR,CAAkB,WAAlB,EAA+B,EAA/B,CAAb,EAAiD,IAAjD,EAAuD,8BAAvD;AACH;;AAED,qBAAOD,KAAP,CAAaF,QAAQI,kBAArB,EAAyC,EAAzC;AACA,qBAAOC,OAAP,CAAeL,QAAQE,KAAR,CAAc,oCAAyB,GAAzB,CAAd,CAAf;;AAEA,YAAII,OAAO,EAAX;AACA,YAAIC,WAAWP,QAAQG,SAAR,CAAkB,WAAlB,EAA+BG,IAA/B,CAAf;AACA,qBAAOJ,KAAP,CAAaK,QAAb,EAAuB,KAAvB,EAA8B,+BAA9B;AACA,qBAAOC,SAAP,CAAiBF,IAAjB,EAAuB,EAAvB,EAA2B,2BAA3B;;AAEAR,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,IAAlC,CAAR;AACAW,eAAO,EAAP;AACAC,mBAAWP,QAAQG,SAAR,CAAkB,WAAlB,EAA+BG,IAA/B,CAAX;AACA,qBAAOJ,KAAP,CAAaK,QAAb,EAAuB,IAAvB,EAA6B,8BAA7B;AACA,qBAAOC,SAAP,CAAiBF,IAAjB,EAAuB,EAAC,gBAAgB,cAAjB,EAAiC,iBAAiB,EAAlD,EAAvB;AACAR,cAAMW,OAAN;AACH,KAtBD;;AAwBAf,OAAI,6DAAJ,EAAmE,YAAM;AACrE,0BAAO,YAAM;AAAE,+CAAwB,CAAC,GAAzB;AAAgC,SAA/C,EAAiDgB,EAAjD,CAAoDC,KAApD,CAA0D,2DAA1D;AACH,KAFD;;AAIAjB,OAAI,4CAAJ,EAAkD,YAAM;AACpD,YAAIM,UAAU,mCAAwB,GAAxB,CAAd;AACA,YAAIY,eAAe,mCAAwB,GAAxB,CAAnB;;AAEA,qBAAOC,IAAP,CAAYb,QAAQE,KAAR,CAAcU,YAAd,CAAZ;AACH,KALD;;AAOAlB,OAAI,8CAAJ,EAAoD,YAAM;AACtD,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,mCAAwB,GAAxB,CAAd;;AAEA,qBAAOE,KAAP,CAAaF,QAAQG,SAAR,CAAkB,WAAlB,EAA+B,EAA/B,CAAb,EAAiD,IAAjD,EAAuD,8BAAvD;;AAEAL,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,KAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,SAAR,CAAkB,WAAlB,EAA+B,EAA/B,CAAb,EAAiD,IAAjD,EAAuD,8BAAvD;AACAL,cAAMW,OAAN;AACH,KAVD;AAWH,CA/CD","file":"ratelimiting_sampler_test.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {assert, expect} from 'chai';\nimport ProbabilisticSampler from '../../src/samplers/probabilistic_sampler.js';\nimport RateLimitingSampler from '../../src/samplers/ratelimiting_sampler.js';\nimport sinon from 'sinon';\n\ndescribe ('RateLimitingSampler should', () => {\n    it('block after threshold is met', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let sampler = new RateLimitingSampler(10);\n        for (let i = 0; i < 10; i++) {\n            assert.equal(sampler.isSampled('operation', {}), true, 'expected decision to be true');\n        }\n\n        assert.equal(sampler.maxTracesPerSecond, 10);\n        assert.isNotOk(sampler.equal(new ProbabilisticSampler(0.5)));\n\n        let tags = {};\n        let decision = sampler.isSampled('operation', tags);\n        assert.equal(decision, false, 'expected decision to be false');\n        assert.deepEqual(tags, {}, 'expected tags to be empty');\n\n        clock = sinon.useFakeTimers(initialDate + 1000);\n        tags = {};\n        decision = sampler.isSampled('operation', tags);\n        assert.equal(decision, true, 'expected decision to be true');\n        assert.deepEqual(tags, {'sampler.type': 'ratelimiting', 'sampler.param': 10});\n        clock.restore();\n    });\n\n    it ('should throw error when initialized with an incorrect value', () => {\n        expect(() => { new RateLimitingSampler(-2.0); }).to.throw('maxTracesPerSecond must be greater than 0.0.  Received -2');\n    });\n\n    it ('should equal another rate limiting sampler', () => {\n        let sampler = new RateLimitingSampler(1.0);\n        let otherSampler = new RateLimitingSampler(1.0);\n\n        assert.isOk(sampler.equal(otherSampler));\n    });\n\n    it ('work with maxCreditsPerSecond smaller than 1', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let sampler = new RateLimitingSampler(0.1);\n\n        assert.equal(sampler.isSampled('operation', {}), true, 'expected decision to be true');\n\n        clock = sinon.useFakeTimers(initialDate + 10000);\n        assert.equal(sampler.isSampled('operation', {}), true, 'expected decision to be true');\n        clock.restore();\n    });\n});\n"]}