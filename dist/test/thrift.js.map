{"version":3,"sources":["../../test/thrift.js"],"names":["describe","it","blob","Buffer","testCases","vType","vDouble","vBool","vBinary","vStr","x","f","forEach","tag","testCase","actualTag","getThriftTags","expectedTag","key","undefined","vLong","emptyBuffer","deepEqual","buf","fill","reporter","tracer","span","startSpan","startTime","log","event","finish","close","tSpan","spanToThrift","encodeInt64","duration","logs","timestamp"],"mappings":";;AAoBA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASAA,SAAU,aAAV,EAAyB,YAAM;AAC3BC,OAAI,yCAAJ,EAA+C,YAAM;AACjD,YAAIC,OAAO,IAAIC,MAAJ,CAAW,CAAX,CAAX;AACA,YAAIC,YAAY,CACZ,EAAC,OAAO,QAAR,EAAkB,SAAS,GAA3B,EAAgCC,OAAO,QAAvC,EAAiDC,SAAS,GAA1D,EADY,EAEZ,EAAC,OAAO,SAAR,EAAmB,SAAS,IAA5B,EAAkCD,OAAO,MAAzC,EAAiDE,OAAO,IAAxD,EAFY,EAGZ,EAAC,OAAO,QAAR,EAAkB,SAASL,IAA3B,EAAiCG,OAAO,QAAxC,EAAkDG,SAASN,IAA3D,EAHY,EAIZ,EAAC,OAAO,QAAR,EAAkB,SAAS,aAA3B,EAA0CG,OAAO,QAAjD,EAA2DI,MAAM,aAAjE,EAJY,EAKZ,EAAC,OAAO,QAAR,EAAkB,SAAS,EAAEC,GAAG,GAAL,EAA3B,EAAuCL,OAAO,QAA9C,EAAwDI,iBAAxD,EALY,EAMZ,EAAC,OAAO,MAAR,EAAgB,SAAS,SAASE,CAAT,GAAY,CAAE,CAAvC,EAAyCN,OAAO,QAAhD,EAA0DI,uBAA1D,EANY,CAAhB;;AASAL,kBAAUQ,OAAV,CAAkB,oBAAY;AAC1B,gBAAIC,MAAM,EAAC,OAAOC,SAAS,KAAT,CAAR,EAAyB,SAASA,SAAS,OAAT,CAAlC,EAAV;AACA,gBAAIC,YAAY,iBAAYC,aAAZ,CAA0B,CAACH,GAAD,CAA1B,EAAiC,CAAjC,CAAhB;AACA,gBAAII,cAAc;AACdC,qBAAKJ,SAASI,GADA;AAEdb,uBAAOS,SAAST,KAFF;AAGdI,sBAAMK,SAASL,IAAT,KAAkBU,SAAlB,GAA8B,EAA9B,GAAmCL,SAASL,IAHpC;AAIdH,yBAASQ,SAASR,OAAT,KAAqBa,SAArB,GAAiC,CAAjC,GAAqCL,SAASR,OAJzC;AAKdC,uBAAOO,SAASP,KAAT,KAAmBY,SAAnB,GAA+B,KAA/B,GAAuCL,SAASP,KALzC;AAMda,uBAAON,SAASM,KAAT,KAAmBD,SAAnB,GAA+B,iBAAYE,WAA3C,GAAyDP,SAASM,KAN3D;AAOdZ,yBAASM,SAASN,OAAT,KAAqBW,SAArB,GAAiC,iBAAYE,WAA7C,GAA2DP,SAASN;AAP/D,aAAlB;AASA,yBAAOc,SAAP,CAAiBP,SAAjB,EAA4BE,WAA5B;AACH,SAbD;AAcH,KAzBD;;AA2BAhB,OAAI,4CAAJ,EAAkD,YAAM;AACpD,YAAIsB,MAAM,IAAIpB,MAAJ,CAAW,CAAX,CAAV;AACAoB,YAAIC,IAAJ,CAAS,CAAT;;AAEA,qBAAOF,SAAP,CAAiB,iBAAYD,WAA7B,EAA0CE,GAA1C;AACH,KALD;;AAOAtB,OAAI,2CAAJ,EAAiD,YAAM;AACnD,YAAIwB,WAAW,kCAAf;AACA,YAAIC,SAAS,qBACT,mBADS,EAETD,QAFS,EAGT,4BAAiB,IAAjB,CAHS,CAAb;AAKA,YAAIE,OAAOD,OAAOE,SAAP,CAAiB,gBAAjB,EAAmC,EAAEC,WAAW,OAAb,EAAnC,CAAX;AACAF,aAAKG,GAAL,CAAS,EAAEC,OAAO,UAAT,EAAT,EAAgC,OAAhC;AACAJ,aAAKK,MAAL,CAAY,OAAZ;AACAN,eAAOO,KAAP;AACA,YAAIC,QAAQ,iBAAYC,YAAZ,CAAyBR,IAAzB,CAAZ;AACA,qBAAOL,SAAP,CAAiBY,MAAML,SAAvB,EAAkC,eAAMO,WAAN,CAAkB,MAAlB,CAAlC;AACA,qBAAOd,SAAP,CAAiBY,MAAMG,QAAvB,EAAiC,eAAMD,WAAN,CAAkB,CAAC,UAAQ,OAAT,IAAoB,IAAtC,CAAjC;AACA,qBAAOd,SAAP,CAAiBY,MAAMI,IAAN,CAAW,CAAX,EAAcC,SAA/B,EAA0C,eAAMH,WAAN,CAAkB,MAAlB,CAA1C;AACH,KAfD;AAgBH,CAnDD","file":"thrift.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {assert} from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport Tracer from '../src/tracer.js';\nimport ThriftUtils from '../src/thrift.js';\nimport Utils from '../src/util.js';\n\ndescribe ('ThriftUtils', () => {\n    it ('should exercise all paths in getTagType', () => {\n        let blob = new Buffer(1);\n        let testCases = [\n            {'key': 'double', 'value': 1.0, vType: 'DOUBLE', vDouble: 1.0 },\n            {'key': 'boolean', 'value': true, vType: 'BOOL', vBool: true },\n            {'key': 'binary', 'value': blob, vType: 'BINARY', vBinary: blob },\n            {'key': 'string', 'value': 'some-string', vType: 'STRING', vStr: 'some-string' },\n            {'key': 'object', 'value': { x: 'y' }, vType: 'STRING', vStr: `{\"x\":\"y\"}` },\n            {'key': 'func', 'value': function f(){}, vType: 'STRING', vStr: `function f() {}` }\n        ];\n\n        testCases.forEach(testCase => {\n            let tag = {'key': testCase['key'], 'value': testCase['value']};\n            let actualTag = ThriftUtils.getThriftTags([tag])[0];\n            let expectedTag = {\n                key: testCase.key,\n                vType: testCase.vType,\n                vStr: testCase.vStr === undefined ? '' : testCase.vStr,\n                vDouble: testCase.vDouble === undefined ? 0 : testCase.vDouble,\n                vBool: testCase.vBool === undefined ? false : testCase.vBool,\n                vLong: testCase.vLong === undefined ? ThriftUtils.emptyBuffer : testCase.vLong,\n                vBinary: testCase.vBinary === undefined ? ThriftUtils.emptyBuffer : testCase.vBinary\n            }\n            assert.deepEqual(actualTag, expectedTag);\n        });\n    });\n\n    it ('should initialize emptyBuffer to all zeros', () => {\n        let buf = new Buffer(8);\n        buf.fill(0);\n\n        assert.deepEqual(ThriftUtils.emptyBuffer, buf);\n    });\n\n    it ('should convert timestamps to microseconds', () => {\n        let reporter = new InMemoryReporter();\n        let tracer = new Tracer(\n            'test-service-name',\n            reporter,\n            new ConstSampler(true)\n        );\n        let span = tracer.startSpan('some operation', { startTime: 123.456 });\n        span.log({ event: 'some log' }, 123.567);\n        span.finish(123.678);\n        tracer.close();\n        let tSpan = ThriftUtils.spanToThrift(span);\n        assert.deepEqual(tSpan.startTime, Utils.encodeInt64(123456));\n        assert.deepEqual(tSpan.duration, Utils.encodeInt64((123.678-123.456) * 1000));\n        assert.deepEqual(tSpan.logs[0].timestamp, Utils.encodeInt64(123567));\n    });\n});\n"]}