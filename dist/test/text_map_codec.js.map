{"version":3,"sources":["../../test/text_map_codec.js"],"names":["constants","describe","it","metrics","tracer","headers","context","extract","FORMAT_HTTP_HEADERS","isOk","counterEquals","decodingErrors","JAEGER_DEBUG_HEADER","encodeURIComponent","isDebugIDContainerOnly","equal","debugId","span","startSpan","childOf","isNotOk","parentId","traceId","isSampled","isDebug","tagFound","i","_tags","length","tag","key","value","tracesStartedSampled"],"mappings":";;AAoBA;;AACA;;IAAYA,S;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAC,SAAS,uBAAT,EAAkC,YAAM;AACpCC,OAAI,mDAAJ,EAAyD,YAAM;AAC3D,YAAIC,UAAU,sBAAY,8BAAZ,CAAd;AACA,YAAIC,SAAS,qBACT,aADS,EAET,kCAFS,EAGT,4BAAiB,KAAjB,CAHS,EAGgB;AACrBD,qBAASA;AADY,SAHhB,CAAb;;AAQA,YAAIE,UAAU;AACV,6BAAiB;AADP,SAAd;AAGA,YAAIC,UAAUF,OAAOG,OAAP,CAAe,sBAAYC,mBAA3B,EAAgDH,OAAhD,CAAd;;AAEA,qBAAOI,IAAP,CAAYH,OAAZ;AACA,qBAAOG,IAAP,CAAY,kBAAaC,aAAb,CAA2BP,QAAQQ,cAAnC,EAAmD,CAAnD,CAAZ;AACH,KAjBD;;AAmBAT,OAAI,iDAAJ,EAAuD,YAAM;AACzD,YAAIC,UAAU,sBAAY,8BAAZ,CAAd;AACA,YAAIC,SAAS,qBACT,aADS,EAET,kCAFS,EAGT,4BAAiB,KAAjB,CAHS,EAGgB;AACrBD,qBAASA;AADY,SAHhB,CAAb;AAOA,YAAIE,UAAU,EAAd;AACAA,gBAAQL,UAAUY,mBAAlB,IAAyCC,mBAAmB,QAAnB,CAAzC;;AAEA,YAAIP,UAAUF,OAAOG,OAAP,CAAe,sBAAYC,mBAA3B,EAAgDH,OAAhD,CAAd;AACA,qBAAOI,IAAP,CAAYH,QAAQQ,sBAAR,EAAZ;AACA,qBAAOC,KAAP,CAAaT,QAAQU,OAArB,EAA8B,QAA9B;;AAEA,YAAIC,OAAOb,OAAOc,SAAP,CAAiB,MAAjB,EAAyB,EAAEC,SAASb,OAAX,EAAzB,CAAX;;AAEA,qBAAOc,OAAP,CAAeH,KAAKX,OAAL,GAAee,QAA9B;AACA,qBAAOZ,IAAP,CAAYQ,KAAKX,OAAL,GAAegB,OAAf,KAA2B,CAAvC;AACA,qBAAOb,IAAP,CAAYQ,KAAKX,OAAL,GAAeiB,SAAf,EAAZ;AACA,qBAAOd,IAAP,CAAYQ,KAAKX,OAAL,GAAekB,OAAf,EAAZ;;AAEA,YAAIC,WAAW,KAAf;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,KAAKU,KAAL,CAAWC,MAA/B,EAAuCF,GAAvC,EAA4C;AACxC,gBAAIG,MAAMZ,KAAKU,KAAL,CAAWD,CAAX,CAAV;AACA,gBAAIG,IAAIC,GAAJ,KAAY9B,UAAUY,mBAAtB,IAA6CK,KAAKU,KAAL,CAAWD,CAAX,EAAcK,KAAd,KAAwB,QAAzE,EAAmF;AAC/EN,2BAAW,IAAX;AACH;AACJ;;AAED,qBAAOhB,IAAP,CAAYgB,QAAZ;;AAEA;AACA,qBAAOhB,IAAP,CAAY,kBAAaC,aAAb,CAA2BP,QAAQ6B,oBAAnC,EAAyD,CAAzD,CAAZ;AACH,KAnCD;AAoCH,CAxDD,E,CA9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"text_map_codec.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {assert} from 'chai';\nimport * as constants from '../src/constants.js';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\n\ndescribe('Text Map Codec should', () => {\n    it ('report metric when failing to decode tracer state', () => {\n        let metrics = new Metrics(new LocalMetricFactory());\n        let tracer = new Tracer(\n            'test-tracer',\n            new InMemoryReporter(),\n            new ConstSampler(false), {\n                metrics: metrics\n            }\n        );\n\n        let headers = {\n            'uber-trace-id': 'bad-value'\n        };\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n\n        assert.isOk(context);\n        assert.isOk(LocalBackend.counterEquals(metrics.decodingErrors, 1));\n    });\n\n    it ('set debug flag when debug-id-header is received', () => {\n        let metrics = new Metrics(new LocalMetricFactory());\n        let tracer = new Tracer(\n            'test-tracer',\n            new InMemoryReporter(),\n            new ConstSampler(false), {\n                metrics: metrics\n            }\n        );\n        let headers = {};\n        headers[constants.JAEGER_DEBUG_HEADER] = encodeURIComponent('value1');\n\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n        assert.isOk(context.isDebugIDContainerOnly());\n        assert.equal(context.debugId, 'value1');\n\n        let span = tracer.startSpan(\"root\", { childOf: context });\n\n        assert.isNotOk(span.context().parentId);\n        assert.isOk(span.context().traceId !== 0);\n        assert.isOk(span.context().isSampled());\n        assert.isOk(span.context().isDebug());\n\n        let tagFound = false;\n        for (let i = 0; i < span._tags.length; i++) {\n            let tag = span._tags[i];\n            if (tag.key === constants.JAEGER_DEBUG_HEADER && span._tags[i].value === 'value1') {\n                tagFound = true;\n            }\n        }\n\n        assert.isOk(tagFound);\n\n        // metrics\n        assert.isOk(LocalBackend.counterEquals(metrics.tracesStartedSampled, 1));\n    });\n});\n"]}