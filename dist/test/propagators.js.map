{"version":3,"sources":["../../test/propagators.js"],"names":["describe","it","codec","urlEncoding","_decodeURIValue","value","URIError","strictEqual","_decodeValue","contextKey","ctx","fromString","out","inject","baggagePrefix","carrier","extract","deepEqual","baggage"],"mappings":";;AAoBA;;AACA;;;;AACA;;;;;;AAEAA,SAAU,cAAV,EAA0B,YAAM;AAC5BC,OAAG,2DAAH,EAAgE,YAAM;AAClE,YAAIC,QAAQ,6BAAiB,EAAEC,aAAa,IAAf,EAAjB,CAAZ;AACAD,cAAME,eAAN,GAAwB,UAACC,KAAD,EAAmB;AACvC,kBAAM,IAAIC,QAAJ,CAAa,YAAb,CAAN;AACH,SAFD;AAGA,qBAAOC,WAAP,CAAmBL,MAAMM,YAAN,CAAmB,KAAnB,CAAnB,EAA8C,KAA9C;AACH,KAND;;AAQAP,OAAG,sDAAH,EAA2D,YAAM;AAC7D,YAAIC,QAAQ,6BAAiB,EAAEC,aAAa,IAAf,EAAjB,CAAZ;AACA;AACA,qBAAOI,WAAP,CAAmBL,MAAMM,YAAN,CAAmB,KAAnB,CAAnB,EAA8C,KAA9C;AACH,KAJD;;AAMAP,OAAG,oCAAH,EAAyC,YAAM;AAC3C,YAAIC,QAAQ,6BAAiB,EAAEC,aAAa,IAAf,EAAqBM,YAAY,eAAjC,EAAjB,CAAZ;AACA,YAAIC,MAAM,uBAAYC,UAAZ,CAAuB,SAAvB,CAAV;AACA,YAAIC,MAAM,EAAV;AACAV,cAAMW,MAAN,CAAaH,GAAb,EAAkBE,GAAlB;AACA,qBAAOL,WAAP,CAAmBK,IAAI,eAAJ,CAAnB,EAAyC,SAAzC;AACH,KAND;;AAQAX,OAAG,uBAAH,EAA4B,YAAM;AAC9B,YAAIC,QAAQ,6BAAiB;AACzBC,yBAAa,IADY;AAEzBM,wBAAY,eAFa;AAGzBK,2BAAe;AAHU,SAAjB,CAAZ;AAKA,YAAIC,UAAU;AACV,6BAAiB,SADP;AAEV,gCAAoB,YAFV;AAGV,0BAAc;AAHJ,SAAd;AAKA,YAAIL,MAAMR,MAAMc,OAAN,CAAcD,OAAd,CAAV;AACA,qBAAOE,SAAP,CAAiBP,IAAIQ,OAArB,EAA8B,EAAE,YAAY,YAAd,EAA9B;AACH,KAbD;AAcH,CArCD,E,CAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"propagators.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {assert} from 'chai';\nimport TextMapCodec from '../src/propagators/text_map_codec';\nimport SpanContext from '../src/span_context';\n\ndescribe ('TextMapCodec', () => {\n    it('should not URL-decode value that has no % meta-characters', () => {\n        let codec = new TextMapCodec({ urlEncoding: true });\n        codec._decodeURIValue = (value: string) => {\n            throw new URIError('fake error');\n        };\n        assert.strictEqual(codec._decodeValue('abc'), 'abc');\n    });\n\n    it('should not throw exception on bad URL-encoded values', () => {\n        let codec = new TextMapCodec({ urlEncoding: true });\n        // this string throws exception when passed to decodeURIComponent\n        assert.strictEqual(codec._decodeValue('%EA'), '%EA');\n    });\n\n    it('should not URL-encode span context', () => {\n        let codec = new TextMapCodec({ urlEncoding: true, contextKey: 'trace-context' });\n        let ctx = SpanContext.fromString('1:1:1:1');\n        let out = {};\n        codec.inject(ctx, out);\n        assert.strictEqual(out['trace-context'], '1:1:1:1');\n    });\n\n    it('should decode baggage', () => {\n        let codec = new TextMapCodec({ \n            urlEncoding: true, \n            contextKey: 'trace-context',\n            baggagePrefix: 'baggage-'\n        });\n        let carrier = {\n            'trace-context': '1:1:1:1',\n            'baggage-some-key': 'some-value',\n            'garbage-in': 'garbage-out'\n        };\n        let ctx = codec.extract(carrier);\n        assert.deepEqual(ctx.baggage, { 'some-key': 'some-value' });\n    });\n});\n"]}