{"version":3,"sources":["../../test/test_util.js"],"names":["describe","tracer","span","spanContext","before","beforeEach","startSpan","fromString","it","tags","addTags","isOk","hasTags","isNotOk","expectedTags","actualTags","getTags","equal","filteredTags","deepEqual"],"mappings":";;AAoBA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWAA,SAAS,WAAT,EAAsB,YAAM;AACxB,QAAIC,eAAJ;AACA,QAAIC,aAAJ;AACA,QAAIC,oBAAJ;;AAEAC,WAAO,YAAM;AACTH,iBAAS,qBACL,aADK,EAEL,kCAFK,EAGL,4BAAiB,IAAjB,CAHK,CAAT;AAKH,KAND;;AAQAI,eAAW,YAAM;AACbH,eAAOD,OAAOK,SAAP,CAAiB,SAAjB,CAAP;AACAH,sBAAc,uBAAYI,UAAZ,CAAuB,YAAvB,CAAd;AACH,KAHD;;AAKAC,OAAI,wBAAJ,EAA8B,YAAM;AAChC,YAAIC,OAAO;AACP,sBAAU,UADH;AAEP,sBAAU;AAFH,SAAX;AAIAP,aAAKQ,OAAL,CAAaD,IAAb;;AAEA,qBAAOE,IAAP,CAAY,oBAAUC,OAAV,CAAkBV,IAAlB,EAAwBO,IAAxB,CAAZ;AACA,qBAAOI,OAAP,CAAe,oBAAUD,OAAV,CAAkBV,IAAlB,EAAwB,EAAE,KAAK,GAAP,EAAxB,CAAf;AACA,qBAAOW,OAAP,CAAe,oBAAUD,OAAV,CAAkBV,IAAlB,EAAwB,EAAE,UAAU,UAAZ,EAAxB,CAAf;AACH,KAVD;;AAYAM,OAAI,wBAAJ,EAA8B,YAAM;AAChC,YAAIM,eAAe;AACf,sBAAU,UADK;AAEf,sBAAU;AAFK,SAAnB;AAIAZ,aAAKQ,OAAL,CAAaI,YAAb;AACA,YAAIC,aAAa,oBAAUC,OAAV,CAAkBd,IAAlB,CAAjB;AACA,qBAAOe,KAAP,CAAaF,WAAW,QAAX,CAAb,EAAmCD,aAAa,QAAb,CAAnC;AACA,qBAAOG,KAAP,CAAaF,WAAW,QAAX,CAAb,EAAmCD,aAAa,QAAb,CAAnC;AACA,YAAII,eAAe,oBAAUF,OAAV,CAAkBd,IAAlB,EAAwB,CAAC,QAAD,EAAW,UAAX,CAAxB,CAAnB;AACA,qBAAOiB,SAAP,CAAiB,EAAC,UAAU,UAAX,EAAjB,EAAyCD,YAAzC;AACH,KAXD;AAYH,CA1CD","file":"test_util.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {assert} from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport opentracing from 'opentracing';\nimport SpanContext from '../src/span_context.js';\nimport Tracer from '../src/tracer.js';\nimport TestUtils from '../src/test_util.js';\nimport Utils from '../src/util.js';\n\ndescribe('TestUtils', () => {\n    let tracer;\n    let span;\n    let spanContext;\n\n    before(() => {\n        tracer = new Tracer(\n            'test-tracer',\n            new InMemoryReporter(),\n            new ConstSampler(true)\n        );\n    });\n\n    beforeEach(() => {\n        span = tracer.startSpan('op-name');\n        spanContext = SpanContext.fromString('ab:cd:ef:3');\n    });\n\n    it ('should support hasTags', () => {\n        let tags = {\n            'keyOne': 'valueOne',\n            'keyTwo': 'valueTwo'\n        };\n        span.addTags(tags);\n\n        assert.isOk(TestUtils.hasTags(span, tags));\n        assert.isNotOk(TestUtils.hasTags(span, { 'k': 'v' }));\n        assert.isNotOk(TestUtils.hasTags(span, { 'keyOne': 'valueTwo' }));\n    });\n\n    it ('should support getTags', () => {\n        let expectedTags = {\n            'keyOne': 'valueOne',\n            'keyTwo': 'valueTwo'\n        };\n        span.addTags(expectedTags);\n        let actualTags = TestUtils.getTags(span);\n        assert.equal(actualTags['keyOne'], expectedTags['keyOne']);\n        assert.equal(actualTags['keyTwo'], expectedTags['keyTwo']);\n        let filteredTags = TestUtils.getTags(span, ['keyTwo', 'keyThree']);\n        assert.deepEqual({'keyTwo': 'valueTwo'}, filteredTags);\n    });\n});\n"]}