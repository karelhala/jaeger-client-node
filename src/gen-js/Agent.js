//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Agent_emitBatch_args = function(args) {
  this.batch = null;
  if (args) {
    if (args.batch !== undefined) {
      this.batch = args.batch;
    }
  }
};
Agent_emitBatch_args.prototype = {};
Agent_emitBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.batch = new Batch();
        this.batch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Agent_emitBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Agent_emitBatch_args');
  if (this.batch !== null && this.batch !== undefined) {
    output.writeFieldBegin('batch', Thrift.Type.STRUCT, 1);
    this.batch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Agent_emitBatch_result = function(args) {
};
Agent_emitBatch_result.prototype = {};
Agent_emitBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Agent_emitBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Agent_emitBatch_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AgentClient.prototype = {};
AgentClient.prototype.emitBatch = function(batch) {
  this.send_emitBatch(batch);
};

AgentClient.prototype.send_emitBatch = function(batch) {
  this.output.writeMessageBegin('emitBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Agent_emitBatch_args();
  args.batch = batch;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
