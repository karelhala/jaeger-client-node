//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


var TagType = {
'STRING' : 0,
'DOUBLE' : 1,
'BOOL' : 2,
'LONG' : 3,
'BINARY' : 4
};
var SpanRefType = {
'CHILD_OF' : 0,
'FOLLOWS_FROM' : 1
};
var Tag = function(args) {
  this.key = null;
  this.vType = null;
  this.vStr = null;
  this.vDouble = null;
  this.vBool = null;
  this.vLong = null;
  this.vBinary = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.vType !== undefined) {
      this.vType = args.vType;
    }
    if (args.vStr !== undefined) {
      this.vStr = args.vStr;
    }
    if (args.vDouble !== undefined) {
      this.vDouble = args.vDouble;
    }
    if (args.vBool !== undefined) {
      this.vBool = args.vBool;
    }
    if (args.vLong !== undefined) {
      this.vLong = args.vLong;
    }
    if (args.vBinary !== undefined) {
      this.vBinary = args.vBinary;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.vType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.vDouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.vBool = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.vLong = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vBinary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.vType !== null && this.vType !== undefined) {
    output.writeFieldBegin('vType', Thrift.Type.I32, 2);
    output.writeI32(this.vType);
    output.writeFieldEnd();
  }
  if (this.vStr !== null && this.vStr !== undefined) {
    output.writeFieldBegin('vStr', Thrift.Type.STRING, 3);
    output.writeString(this.vStr);
    output.writeFieldEnd();
  }
  if (this.vDouble !== null && this.vDouble !== undefined) {
    output.writeFieldBegin('vDouble', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.vDouble);
    output.writeFieldEnd();
  }
  if (this.vBool !== null && this.vBool !== undefined) {
    output.writeFieldBegin('vBool', Thrift.Type.BOOL, 5);
    output.writeBool(this.vBool);
    output.writeFieldEnd();
  }
  if (this.vLong !== null && this.vLong !== undefined) {
    output.writeFieldBegin('vLong', Thrift.Type.I64, 6);
    output.writeI64(this.vLong);
    output.writeFieldEnd();
  }
  if (this.vBinary !== null && this.vBinary !== undefined) {
    output.writeFieldBegin('vBinary', Thrift.Type.STRING, 7);
    output.writeString(this.vBinary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Log = function(args) {
  this.timestamp = null;
  this.fields = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
Log.prototype = {};
Log.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.fields = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Tag();
          elem6.read(input);
          this.fields.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Log.prototype.write = function(output) {
  output.writeStructBegin('Log');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter7 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter7))
      {
        iter7 = this.fields[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpanRef = function(args) {
  this.refType = null;
  this.traceIdLow = null;
  this.traceIdHigh = null;
  this.spanId = null;
  if (args) {
    if (args.refType !== undefined) {
      this.refType = args.refType;
    }
    if (args.traceIdLow !== undefined) {
      this.traceIdLow = args.traceIdLow;
    }
    if (args.traceIdHigh !== undefined) {
      this.traceIdHigh = args.traceIdHigh;
    }
    if (args.spanId !== undefined) {
      this.spanId = args.spanId;
    }
  }
};
SpanRef.prototype = {};
SpanRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.refType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.traceIdLow = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.traceIdHigh = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpanRef.prototype.write = function(output) {
  output.writeStructBegin('SpanRef');
  if (this.refType !== null && this.refType !== undefined) {
    output.writeFieldBegin('refType', Thrift.Type.I32, 1);
    output.writeI32(this.refType);
    output.writeFieldEnd();
  }
  if (this.traceIdLow !== null && this.traceIdLow !== undefined) {
    output.writeFieldBegin('traceIdLow', Thrift.Type.I64, 2);
    output.writeI64(this.traceIdLow);
    output.writeFieldEnd();
  }
  if (this.traceIdHigh !== null && this.traceIdHigh !== undefined) {
    output.writeFieldBegin('traceIdHigh', Thrift.Type.I64, 3);
    output.writeI64(this.traceIdHigh);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 4);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Span = function(args) {
  this.traceIdLow = null;
  this.traceIdHigh = null;
  this.spanId = null;
  this.parentSpanId = null;
  this.operationName = null;
  this.references = null;
  this.flags = null;
  this.startTime = null;
  this.duration = null;
  this.tags = null;
  this.logs = null;
  if (args) {
    if (args.traceIdLow !== undefined) {
      this.traceIdLow = args.traceIdLow;
    }
    if (args.traceIdHigh !== undefined) {
      this.traceIdHigh = args.traceIdHigh;
    }
    if (args.spanId !== undefined) {
      this.spanId = args.spanId;
    }
    if (args.parentSpanId !== undefined) {
      this.parentSpanId = args.parentSpanId;
    }
    if (args.operationName !== undefined) {
      this.operationName = args.operationName;
    }
    if (args.references !== undefined) {
      this.references = args.references;
    }
    if (args.flags !== undefined) {
      this.flags = args.flags;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.logs !== undefined) {
      this.logs = args.logs;
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.traceIdLow = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.traceIdHigh = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.parentSpanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.references = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new SpanRef();
          elem14.read(input);
          this.references.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.tags = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new Tag();
          elem21.read(input);
          this.tags.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.logs = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new Log();
          elem28.read(input);
          this.logs.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.traceIdLow !== null && this.traceIdLow !== undefined) {
    output.writeFieldBegin('traceIdLow', Thrift.Type.I64, 1);
    output.writeI64(this.traceIdLow);
    output.writeFieldEnd();
  }
  if (this.traceIdHigh !== null && this.traceIdHigh !== undefined) {
    output.writeFieldBegin('traceIdHigh', Thrift.Type.I64, 2);
    output.writeI64(this.traceIdHigh);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 3);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.parentSpanId !== null && this.parentSpanId !== undefined) {
    output.writeFieldBegin('parentSpanId', Thrift.Type.I64, 4);
    output.writeI64(this.parentSpanId);
    output.writeFieldEnd();
  }
  if (this.operationName !== null && this.operationName !== undefined) {
    output.writeFieldBegin('operationName', Thrift.Type.STRING, 5);
    output.writeString(this.operationName);
    output.writeFieldEnd();
  }
  if (this.references !== null && this.references !== undefined) {
    output.writeFieldBegin('references', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.references.length);
    for (var iter29 in this.references)
    {
      if (this.references.hasOwnProperty(iter29))
      {
        iter29 = this.references[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 7);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 9);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter30 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter30))
      {
        iter30 = this.tags[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.logs !== null && this.logs !== undefined) {
    output.writeFieldBegin('logs', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.logs.length);
    for (var iter31 in this.logs)
    {
      if (this.logs.hasOwnProperty(iter31))
      {
        iter31 = this.logs[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Process = function(args) {
  this.serviceName = null;
  this.tags = null;
  if (args) {
    if (args.serviceName !== undefined) {
      this.serviceName = args.serviceName;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
  }
};
Process.prototype = {};
Process.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.tags = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Tag();
          elem38.read(input);
          this.tags.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Process.prototype.write = function(output) {
  output.writeStructBegin('Process');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter39 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter39))
      {
        iter39 = this.tags[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Batch = function(args) {
  this.process = null;
  this.spans = null;
  if (args) {
    if (args.process !== undefined) {
      this.process = args.process;
    }
    if (args.spans !== undefined) {
      this.spans = args.spans;
    }
  }
};
Batch.prototype = {};
Batch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.process = new Process();
        this.process.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.spans = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new Span();
          elem46.read(input);
          this.spans.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Batch.prototype.write = function(output) {
  output.writeStructBegin('Batch');
  if (this.process !== null && this.process !== undefined) {
    output.writeFieldBegin('process', Thrift.Type.STRUCT, 1);
    this.process.write(output);
    output.writeFieldEnd();
  }
  if (this.spans !== null && this.spans !== undefined) {
    output.writeFieldBegin('spans', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
    for (var iter47 in this.spans)
    {
      if (this.spans.hasOwnProperty(iter47))
      {
        iter47 = this.spans[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

